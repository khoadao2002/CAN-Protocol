
CAN_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000868c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008804  08008804  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008804  08008804  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008804  08008804  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800880c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b44  2000017c  08008988  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc0  08008988  00020cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe85  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003022  00000000  00000000  0003002a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00033050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00033dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0b9  00000000  00000000  000349b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e8c  00000000  00000000  0004ea71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087671  00000000  00000000  0005f8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6f6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003490  00000000  00000000  000e6fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008780 	.word	0x08008780

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008780 	.word	0x08008780

0800014c <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialization for the CAN protocol */
int CANSPI_Initialize(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
	RXF5 RXF5reg;
	RXM0 RXM0reg;
	RXM1 RXM1reg;

	/* Set the Rx Mask values */
	RXM0reg.RXM0SIDH = 0xFF;
 8000152:	23ff      	movs	r3, #255	; 0xff
 8000154:	713b      	strb	r3, [r7, #4]
	RXM0reg.RXM0SIDL = 0xE0;
 8000156:	23e0      	movs	r3, #224	; 0xe0
 8000158:	717b      	strb	r3, [r7, #5]
	RXM0reg.RXM0EID8 = 0x00;
 800015a:	2300      	movs	r3, #0
 800015c:	71bb      	strb	r3, [r7, #6]
	RXM0reg.RXM0EID0 = 0x00;
 800015e:	2300      	movs	r3, #0
 8000160:	71fb      	strb	r3, [r7, #7]

	RXM1reg.RXM1SIDH = 0xFF;
 8000162:	23ff      	movs	r3, #255	; 0xff
 8000164:	703b      	strb	r3, [r7, #0]
	RXM1reg.RXM1SIDL = 0xEB;
 8000166:	23eb      	movs	r3, #235	; 0xeb
 8000168:	707b      	strb	r3, [r7, #1]
	RXM1reg.RXM1EID8 = 0xFF;
 800016a:	23ff      	movs	r3, #255	; 0xff
 800016c:	70bb      	strb	r3, [r7, #2]
	RXM1reg.RXM1EID0 = 0xFF;
 800016e:	23ff      	movs	r3, #255	; 0xff
 8000170:	70fb      	strb	r3, [r7, #3]

	/* Set the Rx Filter values */
	RXF0reg.RXF0SIDH = 0x00;
 8000172:	2300      	movs	r3, #0
 8000174:	773b      	strb	r3, [r7, #28]
	RXF0reg.RXF0SIDL = 0x00;	//Standard Filter
 8000176:	2300      	movs	r3, #0
 8000178:	777b      	strb	r3, [r7, #29]
	RXF0reg.RXF0EID8 = 0x00;
 800017a:	2300      	movs	r3, #0
 800017c:	77bb      	strb	r3, [r7, #30]
	RXF0reg.RXF0EID0 = 0x00;
 800017e:	2300      	movs	r3, #0
 8000180:	77fb      	strb	r3, [r7, #31]

	RXF1reg.RXF1SIDH = 0x00;
 8000182:	2300      	movs	r3, #0
 8000184:	763b      	strb	r3, [r7, #24]
	RXF1reg.RXF1SIDL = 0x00;	//Standard Filter
 8000186:	2300      	movs	r3, #0
 8000188:	767b      	strb	r3, [r7, #25]
	RXF1reg.RXF1EID8 = 0x00;
 800018a:	2300      	movs	r3, #0
 800018c:	76bb      	strb	r3, [r7, #26]
	RXF1reg.RXF1EID0 = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	76fb      	strb	r3, [r7, #27]

	RXF2reg.RXF2SIDH = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	753b      	strb	r3, [r7, #20]
	RXF2reg.RXF2SIDL = 0x00;	//Standard Filter
 8000196:	2300      	movs	r3, #0
 8000198:	757b      	strb	r3, [r7, #21]
	RXF2reg.RXF2EID8 = 0x00;
 800019a:	2300      	movs	r3, #0
 800019c:	75bb      	strb	r3, [r7, #22]
	RXF2reg.RXF2EID0 = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	75fb      	strb	r3, [r7, #23]

	RXF3reg.RXF3SIDH = 0x00;
 80001a2:	2300      	movs	r3, #0
 80001a4:	743b      	strb	r3, [r7, #16]
	RXF3reg.RXF3SIDL = 0x00;	//Standard Filter
 80001a6:	2300      	movs	r3, #0
 80001a8:	747b      	strb	r3, [r7, #17]
	RXF3reg.RXF3EID8 = 0x00;
 80001aa:	2300      	movs	r3, #0
 80001ac:	74bb      	strb	r3, [r7, #18]
	RXF3reg.RXF3EID0 = 0x00;
 80001ae:	2300      	movs	r3, #0
 80001b0:	74fb      	strb	r3, [r7, #19]

	RXF4reg.RXF4SIDH = 0x00;
 80001b2:	2300      	movs	r3, #0
 80001b4:	733b      	strb	r3, [r7, #12]
	RXF4reg.RXF4SIDL = 0x00;	//Standard Filter
 80001b6:	2300      	movs	r3, #0
 80001b8:	737b      	strb	r3, [r7, #13]
	RXF4reg.RXF4EID8 = 0x00;
 80001ba:	2300      	movs	r3, #0
 80001bc:	73bb      	strb	r3, [r7, #14]
	RXF4reg.RXF4EID0 = 0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	73fb      	strb	r3, [r7, #15]

	RXF5reg.RXF5SIDH = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	723b      	strb	r3, [r7, #8]
	RXF5reg.RXF5SIDL = 0x08;	//Extended Filter
 80001c6:	2308      	movs	r3, #8
 80001c8:	727b      	strb	r3, [r7, #9]
	RXF5reg.RXF5EID8 = 0x00;
 80001ca:	2300      	movs	r3, #0
 80001cc:	72bb      	strb	r3, [r7, #10]
	RXF5reg.RXF5EID0 = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	72fb      	strb	r3, [r7, #11]

	/* Check the status of MCP2515 (ready or not ready) */
	if(!MCP2515_Initialize())
 80001d2:	f000 f945 	bl	8000460 <MCP2515_Initialize>
 80001d6:	4603      	mov	r3, r0
 80001d8:	f083 0301 	eor.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d002      	beq.n	80001e8 <CANSPI_Initialize+0x9c>
	return -1;
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295
 80001e6:	e060      	b.n	80002aa <CANSPI_Initialize+0x15e>

	/* Set the MCP2515 to configuration Mode */
	if(!MCP2515_SetConfigMode())
 80001e8:	f000 f95c 	bl	80004a4 <MCP2515_SetConfigMode>
 80001ec:	4603      	mov	r3, r0
 80001ee:	f083 0301 	eor.w	r3, r3, #1
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d002      	beq.n	80001fe <CANSPI_Initialize+0xb2>
	return -2;
 80001f8:	f06f 0301 	mvn.w	r3, #1
 80001fc:	e055      	b.n	80002aa <CANSPI_Initialize+0x15e>

	/* Configuration for the Filter & Mask */
	MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	461a      	mov	r2, r3
 8000202:	2123      	movs	r1, #35	; 0x23
 8000204:	2020      	movs	r0, #32
 8000206:	f000 f9f1 	bl	80005ec <MCP2515_WriteByteSequence>
	MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800020a:	463b      	mov	r3, r7
 800020c:	461a      	mov	r2, r3
 800020e:	2127      	movs	r1, #39	; 0x27
 8000210:	2024      	movs	r0, #36	; 0x24
 8000212:	f000 f9eb 	bl	80005ec <MCP2515_WriteByteSequence>
	MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000216:	f107 031c 	add.w	r3, r7, #28
 800021a:	461a      	mov	r2, r3
 800021c:	2103      	movs	r1, #3
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f9e4 	bl	80005ec <MCP2515_WriteByteSequence>
	MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	461a      	mov	r2, r3
 800022a:	2107      	movs	r1, #7
 800022c:	2004      	movs	r0, #4
 800022e:	f000 f9dd 	bl	80005ec <MCP2515_WriteByteSequence>
	MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	461a      	mov	r2, r3
 8000238:	210b      	movs	r1, #11
 800023a:	2008      	movs	r0, #8
 800023c:	f000 f9d6 	bl	80005ec <MCP2515_WriteByteSequence>
	MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	461a      	mov	r2, r3
 8000246:	2113      	movs	r1, #19
 8000248:	2010      	movs	r0, #16
 800024a:	f000 f9cf 	bl	80005ec <MCP2515_WriteByteSequence>
	MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	461a      	mov	r2, r3
 8000254:	2117      	movs	r1, #23
 8000256:	2014      	movs	r0, #20
 8000258:	f000 f9c8 	bl	80005ec <MCP2515_WriteByteSequence>
	MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800025c:	f107 0308 	add.w	r3, r7, #8
 8000260:	461a      	mov	r2, r3
 8000262:	211b      	movs	r1, #27
 8000264:	2018      	movs	r0, #24
 8000266:	f000 f9c1 	bl	80005ec <MCP2515_WriteByteSequence>

	/* Accept All (Standard + Extended) */
	MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT allowed the data shift to Filter 1 when Filter 0 is full, Accept Filter 0
 800026a:	2104      	movs	r1, #4
 800026c:	2060      	movs	r0, #96	; 0x60
 800026e:	f000 f999 	bl	80005a4 <MCP2515_WriteByte>
	MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000272:	2101      	movs	r1, #1
 8000274:	2070      	movs	r0, #112	; 0x70
 8000276:	f000 f995 	bl	80005a4 <MCP2515_WriteByte>
	 * T_Phase2Seg = 1..8 TQ.	(option)
	 * bit timing = T_SyncSeg + T_PropSeg + T_Phase1Seg + T_Phase2Seg.
	 * */

	/* Set bit rate equals 250Kbps*/
	MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800027a:	2100      	movs	r1, #0
 800027c:	202a      	movs	r0, #42	; 0x2a
 800027e:	f000 f991 	bl	80005a4 <MCP2515_WriteByte>

	MCP2515_WriteByte(MCP2515_CNF2, 0xAC);
 8000282:	21ac      	movs	r1, #172	; 0xac
 8000284:	2029      	movs	r0, #41	; 0x29
 8000286:	f000 f98d 	bl	80005a4 <MCP2515_WriteByte>

	MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800028a:	2183      	movs	r1, #131	; 0x83
 800028c:	2028      	movs	r0, #40	; 0x28
 800028e:	f000 f989 	bl	80005a4 <MCP2515_WriteByte>

	/* Shift MCP2515 to normal status */
	if(!MCP2515_SetNormalMode())
 8000292:	f000 f925 	bl	80004e0 <MCP2515_SetNormalMode>
 8000296:	4603      	mov	r3, r0
 8000298:	f083 0301 	eor.w	r3, r3, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d002      	beq.n	80002a8 <CANSPI_Initialize+0x15c>
	return -3;
 80002a2:	f06f 0302 	mvn.w	r3, #2
 80002a6:	e000      	b.n	80002aa <CANSPI_Initialize+0x15e>

	return 1;
 80002a8:	2301      	movs	r3, #1
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3720      	adds	r7, #32
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <CANSPI_Receive>:
  return (returnValue);
}

/* Configuration for the CAN Reception */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b088      	sub	sp, #32
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  /* Check for the Receiver status */
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80002be:	f000 f9bf 	bl	8000640 <MCP2515_GetRxStatus>
 80002c2:	4603      	mov	r3, r0
 80002c4:	733b      	strb	r3, [r7, #12]

  /* Check rx buffer value, if the rx buffer value equals 0 (not message given), else message given */
  if (rxStatus.rxBuffer != 0)
 80002c6:	7b3b      	ldrb	r3, [r7, #12]
 80002c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d066      	beq.n	80003a0 <CANSPI_Receive+0xee>
  {
    /* Receive data from RX */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80002d2:	7b3b      	ldrb	r3, [r7, #12]
 80002d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b40      	cmp	r3, #64	; 0x40
 80002dc:	bf0c      	ite	eq
 80002de:	2301      	moveq	r3, #1
 80002e0:	2300      	movne	r3, #0
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	7b3b      	ldrb	r3, [r7, #12]
 80002e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2bc0      	cmp	r3, #192	; 0xc0
 80002ee:	bf0c      	ite	eq
 80002f0:	2301      	moveq	r3, #1
 80002f2:	2300      	movne	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	4313      	orrs	r3, r2
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d007      	beq.n	800030e <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	220d      	movs	r2, #13
 8000304:	4619      	mov	r1, r3
 8000306:	2090      	movs	r0, #144	; 0x90
 8000308:	f000 f92a 	bl	8000560 <MCP2515_ReadRxSequence>
 800030c:	e00c      	b.n	8000328 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800030e:	7b3b      	ldrb	r3, [r7, #12]
 8000310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b80      	cmp	r3, #128	; 0x80
 8000318:	d106      	bne.n	8000328 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	220d      	movs	r2, #13
 8000320:	4619      	mov	r1, r3
 8000322:	2094      	movs	r0, #148	; 0x94
 8000324:	f000 f91c 	bl	8000560 <MCP2515_ReadRxSequence>
    }

    /* Check ID Type (Standard or Extended) */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000328:	7b3b      	ldrb	r3, [r7, #12]
 800032a:	f003 0318 	and.w	r3, r3, #24
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b10      	cmp	r3, #16
 8000332:	d10c      	bne.n	800034e <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2202      	movs	r2, #2
 8000338:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800033a:	7cb8      	ldrb	r0, [r7, #18]
 800033c:	7cf9      	ldrb	r1, [r7, #19]
 800033e:	7c3a      	ldrb	r2, [r7, #16]
 8000340:	7c7b      	ldrb	r3, [r7, #17]
 8000342:	f000 f832 	bl	80003aa <convertReg2ExtendedCANid>
 8000346:	4602      	mov	r2, r0
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	e00b      	b.n	8000366 <CANSPI_Receive+0xb4>
    }
    else
    {
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000354:	7c3b      	ldrb	r3, [r7, #16]
 8000356:	7c7a      	ldrb	r2, [r7, #17]
 8000358:	4611      	mov	r1, r2
 800035a:	4618      	mov	r0, r3
 800035c:	f000 f863 	bl	8000426 <convertReg2StandardCANid>
 8000360:	4602      	mov	r2, r0
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000366:	7d3a      	ldrb	r2, [r7, #20]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800036c:	7d7a      	ldrb	r2, [r7, #21]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000372:	7dba      	ldrb	r2, [r7, #22]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000378:	7dfa      	ldrb	r2, [r7, #23]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 800037e:	7e3a      	ldrb	r2, [r7, #24]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000384:	7e7a      	ldrb	r2, [r7, #25]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800038a:	7eba      	ldrb	r2, [r7, #26]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000390:	7efa      	ldrb	r2, [r7, #27]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000396:	7f3a      	ldrb	r2, [r7, #28]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 800039c:	2301      	movs	r3, #1
 800039e:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 80003a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Convert the SIDH, SIDL, EID8, EDI0 values to 29-bits ID (Extended Frame) */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80003aa:	b490      	push	{r4, r7}
 80003ac:	b086      	sub	sp, #24
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	4604      	mov	r4, r0
 80003b2:	4608      	mov	r0, r1
 80003b4:	4611      	mov	r1, r2
 80003b6:	461a      	mov	r2, r3
 80003b8:	4623      	mov	r3, r4
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4603      	mov	r3, r0
 80003be:	71bb      	strb	r3, [r7, #6]
 80003c0:	460b      	mov	r3, r1
 80003c2:	717b      	strb	r3, [r7, #5]
 80003c4:	4613      	mov	r3, r2
 80003c6:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80003d0:	793b      	ldrb	r3, [r7, #4]
 80003d2:	f003 0303 	and.w	r3, r3, #3
 80003d6:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80003d8:	793b      	ldrb	r3, [r7, #4]
 80003da:	095b      	lsrs	r3, r3, #5
 80003dc:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80003de:	797b      	ldrb	r3, [r7, #5]
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80003e4:	7bbb      	ldrb	r3, [r7, #14]
 80003e6:	693a      	ldr	r2, [r7, #16]
 80003e8:	4413      	add	r3, r2
 80003ea:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	693a      	ldr	r2, [r7, #16]
 80003f6:	4413      	add	r3, r2
 80003f8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	021b      	lsls	r3, r3, #8
 80003fe:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	693a      	ldr	r2, [r7, #16]
 8000404:	4413      	add	r3, r2
 8000406:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	021b      	lsls	r3, r3, #8
 800040c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800040e:	79bb      	ldrb	r3, [r7, #6]
 8000410:	693a      	ldr	r2, [r7, #16]
 8000412:	4413      	add	r3, r2
 8000414:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800041a:	697b      	ldr	r3, [r7, #20]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bc90      	pop	{r4, r7}
 8000424:	4770      	bx	lr

08000426 <convertReg2StandardCANid>:

/* Convert SIDL, SIDH, EID8, EDI0 values to 11-bits ID (Standard Frame) */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000426:	b480      	push	{r7}
 8000428:	b085      	sub	sp, #20
 800042a:	af00      	add	r7, sp, #0
 800042c:	4603      	mov	r3, r0
 800042e:	460a      	mov	r2, r1
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	4613      	mov	r3, r2
 8000434:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000440:	79bb      	ldrb	r3, [r7, #6]
 8000442:	095b      	lsrs	r3, r3, #5
 8000444:	b2db      	uxtb	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	4413      	add	r3, r2
 800044c:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
	...

08000460 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* Check the SPI status */
bool MCP2515_Initialize(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8000466:	2201      	movs	r2, #1
 8000468:	2110      	movs	r1, #16
 800046a:	480c      	ldr	r0, [pc, #48]	; (800049c <MCP2515_Initialize+0x3c>)
 800046c:	f000 fe5e 	bl	800112c <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000470:	230a      	movs	r3, #10
 8000472:	71fb      	strb	r3, [r7, #7]

  do {
	  /* Command check the status*/
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000474:	480a      	ldr	r0, [pc, #40]	; (80004a0 <MCP2515_Initialize+0x40>)
 8000476:	f003 fcf1 	bl	8003e5c <HAL_SPI_GetState>
 800047a:	4603      	mov	r3, r0
 800047c:	2b01      	cmp	r3, #1
 800047e:	d101      	bne.n	8000484 <MCP2515_Initialize+0x24>
      return true;
 8000480:	2301      	movs	r3, #1
 8000482:	e006      	b.n	8000492 <MCP2515_Initialize+0x32>

    loop--;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	3b01      	subs	r3, #1
 8000488:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1f1      	bne.n	8000474 <MCP2515_Initialize+0x14>

  return false;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40010800 	.word	0x40010800
 80004a0:	20000198 	.word	0x20000198

080004a4 <MCP2515_SetConfigMode>:

/* Give MCP2515 into Configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration*/
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	200f      	movs	r0, #15
 80004ae:	f000 f879 	bl	80005a4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80004b2:	230a      	movs	r3, #10
 80004b4:	71fb      	strb	r3, [r7, #7]

  do {
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80004b6:	200e      	movs	r0, #14
 80004b8:	f000 f830 	bl	800051c <MCP2515_ReadByte>
 80004bc:	4603      	mov	r3, r0
 80004be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80004c2:	2b80      	cmp	r3, #128	; 0x80
 80004c4:	d101      	bne.n	80004ca <MCP2515_SetConfigMode+0x26>
      return true;
 80004c6:	2301      	movs	r3, #1
 80004c8:	e006      	b.n	80004d8 <MCP2515_SetConfigMode+0x34>

    loop--;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1ef      	bne.n	80004b6 <MCP2515_SetConfigMode+0x12>

  return false;
 80004d6:	2300      	movs	r3, #0
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <MCP2515_SetNormalMode>:

/* Give MCP2515 into Configuration mode */
bool MCP2515_SetNormalMode(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80004e6:	2100      	movs	r1, #0
 80004e8:	200f      	movs	r0, #15
 80004ea:	f000 f85b 	bl	80005a4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80004ee:	230a      	movs	r3, #10
 80004f0:	71fb      	strb	r3, [r7, #7]

  do {
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80004f2:	200e      	movs	r0, #14
 80004f4:	f000 f812 	bl	800051c <MCP2515_ReadByte>
 80004f8:	4603      	mov	r3, r0
 80004fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d101      	bne.n	8000506 <MCP2515_SetNormalMode+0x26>
      return true;
 8000502:	2301      	movs	r3, #1
 8000504:	e006      	b.n	8000514 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	3b01      	subs	r3, #1
 800050a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d1ef      	bne.n	80004f2 <MCP2515_SetNormalMode+0x12>

  return false;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* Read Command  */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000526:	2200      	movs	r2, #0
 8000528:	2110      	movs	r1, #16
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <MCP2515_ReadByte+0x40>)
 800052c:	f000 fdfe 	bl	800112c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 f8a1 	bl	8000678 <SPI_Tx>
  SPI_Tx(address);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f89d 	bl	8000678 <SPI_Tx>
  retVal = SPI_Rx();
 800053e:	f000 f8c1 	bl	80006c4 <SPI_Rx>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000546:	2201      	movs	r2, #1
 8000548:	2110      	movs	r1, #16
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <MCP2515_ReadByte+0x40>)
 800054c:	f000 fdee 	bl	800112c <HAL_GPIO_WritePin>

  return retVal;
 8000550:	7bfb      	ldrb	r3, [r7, #15]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010800 	.word	0x40010800

08000560 <MCP2515_ReadRxSequence>:

/* Read Rx Sequence command */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000570:	2200      	movs	r2, #0
 8000572:	2110      	movs	r1, #16
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <MCP2515_ReadRxSequence+0x40>)
 8000576:	f000 fdd9 	bl	800112c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f87b 	bl	8000678 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	4619      	mov	r1, r3
 8000586:	6838      	ldr	r0, [r7, #0]
 8000588:	f000 f8ac 	bl	80006e4 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <MCP2515_ReadRxSequence+0x40>)
 8000592:	f000 fdcb 	bl	800112c <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40010800 	.word	0x40010800

080005a4 <MCP2515_WriteByte>:

/* Write Command */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80005b4:	2200      	movs	r2, #0
 80005b6:	2110      	movs	r1, #16
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <MCP2515_WriteByte+0x44>)
 80005ba:	f000 fdb7 	bl	800112c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 f85a 	bl	8000678 <SPI_Tx>
  SPI_Tx(address);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f856 	bl	8000678 <SPI_Tx>
  SPI_Tx(data);
 80005cc:	79bb      	ldrb	r3, [r7, #6]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f852 	bl	8000678 <SPI_Tx>

  MCP2515_CS_HIGH();
 80005d4:	2201      	movs	r2, #1
 80005d6:	2110      	movs	r1, #16
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <MCP2515_WriteByte+0x44>)
 80005da:	f000 fda7 	bl	800112c <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40010800 	.word	0x40010800

080005ec <MCP2515_WriteByteSequence>:

/* Write Sequence Command */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	603a      	str	r2, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	460b      	mov	r3, r1
 80005fa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80005fc:	2200      	movs	r2, #0
 80005fe:	2110      	movs	r1, #16
 8000600:	480e      	ldr	r0, [pc, #56]	; (800063c <MCP2515_WriteByteSequence+0x50>)
 8000602:	f000 fd93 	bl	800112c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000606:	2002      	movs	r0, #2
 8000608:	f000 f836 	bl	8000678 <SPI_Tx>
  SPI_Tx(startAddress);
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f832 	bl	8000678 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000614:	79ba      	ldrb	r2, [r7, #6]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	3301      	adds	r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f000 f83a 	bl	800069c <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <MCP2515_WriteByteSequence+0x50>)
 800062e:	f000 fd7d 	bl	800112c <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010800 	.word	0x40010800

08000640 <MCP2515_GetRxStatus>:
  return retVal;
}

/* Rx Status Command */
uint8_t MCP2515_GetRxStatus(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000646:	2200      	movs	r2, #0
 8000648:	2110      	movs	r1, #16
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <MCP2515_GetRxStatus+0x34>)
 800064c:	f000 fd6e 	bl	800112c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8000650:	20b0      	movs	r0, #176	; 0xb0
 8000652:	f000 f811 	bl	8000678 <SPI_Tx>
  retVal = SPI_Rx();
 8000656:	f000 f835 	bl	80006c4 <SPI_Rx>
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 800065e:	2201      	movs	r2, #1
 8000660:	2110      	movs	r1, #16
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <MCP2515_GetRxStatus+0x34>)
 8000664:	f000 fd62 	bl	800112c <HAL_GPIO_WritePin>

  return retVal;
 8000668:	79fb      	ldrb	r3, [r7, #7]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010800 	.word	0x40010800

08000678 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* Transmission one byte */
static void SPI_Tx(uint8_t data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000682:	1df9      	adds	r1, r7, #7
 8000684:	230a      	movs	r3, #10
 8000686:	2201      	movs	r2, #1
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <SPI_Tx+0x20>)
 800068a:	f002 ffe1 	bl	8003650 <HAL_SPI_Transmit>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000198 	.word	0x20000198

0800069c <SPI_TxBuffer>:

/* Transmission multiple bytes */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	230a      	movs	r3, #10
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <SPI_TxBuffer+0x24>)
 80006b2:	f002 ffcd 	bl	8003650 <HAL_SPI_Transmit>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000198 	.word	0x20000198

080006c4 <SPI_Rx>:

/* Reception one byte */
static uint8_t SPI_Rx(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80006ca:	1df9      	adds	r1, r7, #7
 80006cc:	230a      	movs	r3, #10
 80006ce:	2201      	movs	r2, #1
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <SPI_Rx+0x1c>)
 80006d2:	f003 f901 	bl	80038d8 <HAL_SPI_Receive>
  return retVal;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000198 	.word	0x20000198

080006e4 <SPI_RxBuffer>:

/* Reception multiple bytes */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	230a      	movs	r3, #10
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <SPI_RxBuffer+0x24>)
 80006fa:	f003 f8ed 	bl	80038d8 <HAL_SPI_Receive>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000198 	.word	0x20000198

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 f9f3 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f837 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 f8c5 	bl	80008a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800071e:	f000 f88d 	bl	800083c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000722:	f007 fb8b 	bl	8007e3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uCAN_MSG rxMessage;
  CANSPI_Initialize();
 8000726:	f7ff fd11 	bl	800014c <CANSPI_Initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CANSPI_Receive(&rxMessage))
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fdc0 	bl	80002b2 <CANSPI_Receive>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01e      	beq.n	8000776 <main+0x6a>
	  {
		  rx_buffer[0] = rxMessage.frame.data0;
 8000738:	7b7a      	ldrb	r2, [r7, #13]
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <main+0x74>)
 800073c:	701a      	strb	r2, [r3, #0]
		  rx_buffer[1] = rxMessage.frame.data1;
 800073e:	7bba      	ldrb	r2, [r7, #14]
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <main+0x74>)
 8000742:	705a      	strb	r2, [r3, #1]
		  rx_buffer[2] = rxMessage.frame.data2;
 8000744:	7bfa      	ldrb	r2, [r7, #15]
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <main+0x74>)
 8000748:	709a      	strb	r2, [r3, #2]
		  rx_buffer[3] = rxMessage.frame.data3;
 800074a:	7c3a      	ldrb	r2, [r7, #16]
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <main+0x74>)
 800074e:	70da      	strb	r2, [r3, #3]
		  rx_buffer[4] = rxMessage.frame.data4;
 8000750:	7c7a      	ldrb	r2, [r7, #17]
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <main+0x74>)
 8000754:	711a      	strb	r2, [r3, #4]
		  rx_buffer[5] = rxMessage.frame.data5;
 8000756:	7cba      	ldrb	r2, [r7, #18]
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <main+0x74>)
 800075a:	715a      	strb	r2, [r3, #5]
		  rx_buffer[6] = rxMessage.frame.data6;
 800075c:	7cfa      	ldrb	r2, [r7, #19]
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <main+0x74>)
 8000760:	719a      	strb	r2, [r3, #6]
		  rx_buffer[7] = rxMessage.frame.data7;
 8000762:	7d3a      	ldrb	r2, [r7, #20]
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <main+0x74>)
 8000766:	71da      	strb	r2, [r3, #7]
		  rx_buffer[8] = rxMessage.frame.dlc;
 8000768:	7b3a      	ldrb	r2, [r7, #12]
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <main+0x74>)
 800076c:	721a      	strb	r2, [r3, #8]
		  id = rxMessage.frame.id;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	b29a      	uxth	r2, r3
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <main+0x78>)
 8000774:	801a      	strh	r2, [r3, #0]
	  }
	  HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f000 fa22 	bl	8000bc0 <HAL_Delay>
	  if(CANSPI_Receive(&rxMessage))
 800077c:	e7d5      	b.n	800072a <main+0x1e>
 800077e:	bf00      	nop
 8000780:	200001f0 	.word	0x200001f0
 8000784:	200001fa 	.word	0x200001fa

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000792:	2228      	movs	r2, #40	; 0x28
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f007 ffea 	bl	8008770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fa1e 	bl	8002c20 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007ea:	f000 f8a7 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2102      	movs	r1, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fc8a 	bl	8003124 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000816:	f000 f891 	bl	800093c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800081a:	2310      	movs	r3, #16
 800081c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fdd9 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000830:	f000 f884 	bl	800093c <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	; 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_SPI1_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000870:	2210      	movs	r2, #16
 8000872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_SPI1_Init+0x64>)
 800088e:	f002 fe5b 	bl	8003548 <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f850 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000198 	.word	0x20000198
 80008a4:	40013000 	.word	0x40013000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0320 	and.w	r3, r3, #32
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2110      	movs	r1, #16
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_GPIO_Init+0x90>)
 80008f2:	f000 fc1b 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <MX_GPIO_Init+0x90>)
 800090a:	f000 fa8b 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 800090e:	2310      	movs	r3, #16
 8000910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4619      	mov	r1, r3
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_GPIO_Init+0x90>)
 8000926:	f000 fa7d 	bl	8000e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000
 8000938:	40010800 	.word	0x40010800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_MspInit+0x5c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <HAL_MspInit+0x5c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_MspInit+0x5c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x5c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x5c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x5c>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_MspInit+0x60>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_MspInit+0x60>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010000 	.word	0x40010000

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <HAL_SPI_MspInit+0x88>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d12f      	bne.n	8000a2c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 8000a10:	f000 fa08 	bl	8000e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 8000a28:	f000 f9fc 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013000 	.word	0x40013000
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a86:	f000 f87f 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a96:	f000 fc7d 	bl	8001394 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200007c8 	.word	0x200007c8

08000aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab0:	f7ff fff8 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ab6:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000acc:	4c09      	ldr	r4, [pc, #36]	; (8000af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ada:	f007 fe25 	bl	8008728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fe15 	bl	800070c <main>
  bx lr
 8000ae2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000aec:	0800880c 	.word	0x0800880c
  ldr r2, =_sbss
 8000af0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000af4:	20000cc0 	.word	0x20000cc0

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x28>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x28>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f947 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	200f      	movs	r0, #15
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff ff16 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f95f 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f000 f927 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200001fc 	.word	0x200001fc

08000bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	200001fc 	.word	0x200001fc

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fff0 	bl	8000bac <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffe0 	bl	8000bac <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <__NVIC_EnableIRQ+0x34>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff90 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff2d 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff42 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff90 	bl	8000cf8 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5f 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff35 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffa2 	bl	8000d5c <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b08b      	sub	sp, #44	; 0x2c
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e169      	b.n	800110c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8158 	bne.w	8001106 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4a9a      	ldr	r2, [pc, #616]	; (80010c4 <HAL_GPIO_Init+0x2a0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d05e      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e60:	4a98      	ldr	r2, [pc, #608]	; (80010c4 <HAL_GPIO_Init+0x2a0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d875      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e66:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <HAL_GPIO_Init+0x2a4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d058      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e6c:	4a96      	ldr	r2, [pc, #600]	; (80010c8 <HAL_GPIO_Init+0x2a4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d86f      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e72:	4a96      	ldr	r2, [pc, #600]	; (80010cc <HAL_GPIO_Init+0x2a8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d052      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e78:	4a94      	ldr	r2, [pc, #592]	; (80010cc <HAL_GPIO_Init+0x2a8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d869      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e7e:	4a94      	ldr	r2, [pc, #592]	; (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d04c      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e84:	4a92      	ldr	r2, [pc, #584]	; (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d863      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e8a:	4a92      	ldr	r2, [pc, #584]	; (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d046      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e90:	4a90      	ldr	r2, [pc, #576]	; (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d85d      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d82a      	bhi.n	8000ef0 <HAL_GPIO_Init+0xcc>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d859      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <HAL_GPIO_Init+0x80>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000f1f 	.word	0x08000f1f
 8000ea8:	08000ef9 	.word	0x08000ef9
 8000eac:	08000f0b 	.word	0x08000f0b
 8000eb0:	08000f4d 	.word	0x08000f4d
 8000eb4:	08000f53 	.word	0x08000f53
 8000eb8:	08000f53 	.word	0x08000f53
 8000ebc:	08000f53 	.word	0x08000f53
 8000ec0:	08000f53 	.word	0x08000f53
 8000ec4:	08000f53 	.word	0x08000f53
 8000ec8:	08000f53 	.word	0x08000f53
 8000ecc:	08000f53 	.word	0x08000f53
 8000ed0:	08000f53 	.word	0x08000f53
 8000ed4:	08000f53 	.word	0x08000f53
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f53 	.word	0x08000f53
 8000ee0:	08000f53 	.word	0x08000f53
 8000ee4:	08000f53 	.word	0x08000f53
 8000ee8:	08000f01 	.word	0x08000f01
 8000eec:	08000f15 	.word	0x08000f15
 8000ef0:	4a79      	ldr	r2, [pc, #484]	; (80010d8 <HAL_GPIO_Init+0x2b4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ef6:	e02c      	b.n	8000f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	623b      	str	r3, [r7, #32]
          break;
 8000efe:	e029      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	3304      	adds	r3, #4
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	e024      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	3308      	adds	r3, #8
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e01f      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e01a      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f26:	2304      	movs	r3, #4
 8000f28:	623b      	str	r3, [r7, #32]
          break;
 8000f2a:	e013      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d105      	bne.n	8000f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f34:	2308      	movs	r3, #8
 8000f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	611a      	str	r2, [r3, #16]
          break;
 8000f3e:	e009      	b.n	8000f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f40:	2308      	movs	r3, #8
 8000f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	615a      	str	r2, [r3, #20]
          break;
 8000f4a:	e003      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          break;
 8000f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d801      	bhi.n	8000f5e <HAL_GPIO_Init+0x13a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	e001      	b.n	8000f62 <HAL_GPIO_Init+0x13e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3304      	adds	r3, #4
 8000f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2bff      	cmp	r3, #255	; 0xff
 8000f68:	d802      	bhi.n	8000f70 <HAL_GPIO_Init+0x14c>
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x152>
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	3b08      	subs	r3, #8
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	6a39      	ldr	r1, [r7, #32]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	431a      	orrs	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 80b1 	beq.w	8001106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa4:	4b4d      	ldr	r3, [pc, #308]	; (80010dc <HAL_GPIO_Init+0x2b8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	; (80010dc <HAL_GPIO_Init+0x2b8>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b4a      	ldr	r3, [pc, #296]	; (80010dc <HAL_GPIO_Init+0x2b8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fbc:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a40      	ldr	r2, [pc, #256]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d013      	beq.n	8001010 <HAL_GPIO_Init+0x1ec>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a3f      	ldr	r2, [pc, #252]	; (80010e8 <HAL_GPIO_Init+0x2c4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d00d      	beq.n	800100c <HAL_GPIO_Init+0x1e8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <HAL_GPIO_Init+0x2c8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x1e4>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3d      	ldr	r2, [pc, #244]	; (80010f0 <HAL_GPIO_Init+0x2cc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_GPIO_Init+0x1e0>
 8001000:	2303      	movs	r3, #3
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001004:	2304      	movs	r3, #4
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001010:	2300      	movs	r3, #0
 8001012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001022:	492f      	ldr	r1, [pc, #188]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	492c      	ldr	r1, [pc, #176]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	608b      	str	r3, [r1, #8]
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	43db      	mvns	r3, r3
 8001052:	4928      	ldr	r1, [pc, #160]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001054:	4013      	ands	r3, r2
 8001056:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	4922      	ldr	r1, [pc, #136]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	60cb      	str	r3, [r1, #12]
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	43db      	mvns	r3, r3
 800107a:	491e      	ldr	r1, [pc, #120]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800107c:	4013      	ands	r3, r2
 800107e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4918      	ldr	r1, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4914      	ldr	r1, [pc, #80]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d021      	beq.n	80010f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	490e      	ldr	r1, [pc, #56]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e021      	b.n	8001106 <HAL_GPIO_Init+0x2e2>
 80010c2:	bf00      	nop
 80010c4:	10320000 	.word	0x10320000
 80010c8:	10310000 	.word	0x10310000
 80010cc:	10220000 	.word	0x10220000
 80010d0:	10210000 	.word	0x10210000
 80010d4:	10120000 	.word	0x10120000
 80010d8:	10110000 	.word	0x10110000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40011000 	.word	0x40011000
 80010f0:	40011400 	.word	0x40011400
 80010f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_GPIO_Init+0x304>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4909      	ldr	r1, [pc, #36]	; (8001128 <HAL_GPIO_Init+0x304>)
 8001102:	4013      	ands	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	3301      	adds	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	f47f ae8e 	bne.w	8000e38 <HAL_GPIO_Init+0x14>
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	372c      	adds	r7, #44	; 0x2c
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	611a      	str	r2, [r3, #16]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e0e8      	b.n	8001340 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d106      	bne.n	8001188 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 f826 	bl	80081d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2203      	movs	r2, #3
 800118c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f002 ff9a 	bl	80040d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3304      	adds	r3, #4
 80011a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011aa:	f002 ff70 	bl	800408e <USB_CoreInit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0bf      	b.n	8001340 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 ff9e 	bl	8004108 <USB_SetCurrentMode>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2202      	movs	r2, #2
 80011d6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0b0      	b.n	8001340 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	e03e      	b.n	8001262 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	3311      	adds	r3, #17
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3310      	adds	r3, #16
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3313      	adds	r3, #19
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	3320      	adds	r3, #32
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	440b      	add	r3, r1
 8001242:	3324      	adds	r3, #36	; 0x24
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	3301      	adds	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	791b      	ldrb	r3, [r3, #4]
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	429a      	cmp	r2, r3
 800126a:	d3bb      	bcc.n	80011e4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e044      	b.n	80012fc <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	f203 1353 	addw	r3, r3, #339	; 0x153
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	440b      	add	r3, r1
 80012d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	3301      	adds	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3b5      	bcc.n	8001272 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3304      	adds	r3, #4
 800130e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001310:	f002 ff06 	bl	8004120 <USB_DevInit>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2202      	movs	r2, #2
 800131e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00c      	b.n	8001340 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f005 f986 	bl	800664a <USB_DevDisconnect>

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_PCD_Start+0x16>
 800135a:	2302      	movs	r3, #2
 800135c:	e016      	b.n	800138c <HAL_PCD_Start+0x44>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fe9c 	bl	80040a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001370:	2101      	movs	r1, #1
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f007 f9a1 	bl	80086ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f005 f95a 	bl	8006636 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 f95c 	bl	800665e <USB_ReadInterrupts>
 80013a6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fb1a 	bl	80019ec <PCD_EP_ISR_Handler>

    return;
 80013b8:	e119      	b.n	80015ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d6:	b292      	uxth	r2, r2
 80013d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f006 ff74 	bl	80082ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f905 	bl	80015f4 <HAL_PCD_SetAddress>

    return;
 80013ea:	e100      	b.n	80015ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00c      	beq.n	8001410 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001408:	b292      	uxth	r2, r2
 800140a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800140e:	e0ee      	b.n	80015ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00c      	beq.n	8001434 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001422:	b29a      	uxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800142c:	b292      	uxth	r2, r2
 800142e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001432:	e0dc      	b.n	80015ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d027      	beq.n	800148e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001446:	b29a      	uxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0204 	bic.w	r2, r2, #4
 8001450:	b292      	uxth	r2, r2
 8001452:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800145e:	b29a      	uxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0208 	bic.w	r2, r2, #8
 8001468:	b292      	uxth	r2, r2
 800146a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f006 ff64 	bl	800833c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800147c:	b29a      	uxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001486:	b292      	uxth	r2, r2
 8001488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800148c:	e0af      	b.n	80015ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8083 	beq.w	80015a0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	77fb      	strb	r3, [r7, #31]
 800149e:	e010      	b.n	80014c2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	441a      	add	r2, r3
 80014ac:	7ffb      	ldrb	r3, [r7, #31]
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	b292      	uxth	r2, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	3320      	adds	r3, #32
 80014b6:	443b      	add	r3, r7
 80014b8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80014bc:	7ffb      	ldrb	r3, [r7, #31]
 80014be:	3301      	adds	r3, #1
 80014c0:	77fb      	strb	r3, [r7, #31]
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	2b07      	cmp	r3, #7
 80014c6:	d9eb      	bls.n	80014a0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	b292      	uxth	r2, r2
 80014dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	b292      	uxth	r2, r2
 80014f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80014f8:	bf00      	nop
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001502:	b29b      	uxth	r3, r3
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f6      	beq.n	80014fa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001514:	b29a      	uxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800151e:	b292      	uxth	r2, r2
 8001520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	77fb      	strb	r3, [r7, #31]
 8001528:	e00f      	b.n	800154a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	4611      	mov	r1, r2
 8001532:	7ffa      	ldrb	r2, [r7, #31]
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	440a      	add	r2, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3320      	adds	r3, #32
 800153c:	443b      	add	r3, r7
 800153e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001542:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001544:	7ffb      	ldrb	r3, [r7, #31]
 8001546:	3301      	adds	r3, #1
 8001548:	77fb      	strb	r3, [r7, #31]
 800154a:	7ffb      	ldrb	r3, [r7, #31]
 800154c:	2b07      	cmp	r3, #7
 800154e:	d9ec      	bls.n	800152a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0208 	orr.w	r2, r2, #8
 8001562:	b292      	uxth	r2, r2
 8001564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157a:	b292      	uxth	r2, r2
 800157c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0204 	orr.w	r2, r2, #4
 8001592:	b292      	uxth	r2, r2
 8001594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f006 feb5 	bl	8008308 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800159e:	e026      	b.n	80015ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00f      	beq.n	80015ca <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015bc:	b292      	uxth	r2, r2
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f006 fe73 	bl	80082ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015c8:	e011      	b.n	80015ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00c      	beq.n	80015ee <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e6:	b292      	uxth	r2, r2
 80015e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015ec:	bf00      	nop
  }
}
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_PCD_SetAddress+0x1a>
 800160a:	2302      	movs	r3, #2
 800160c:	e012      	b.n	8001634 <HAL_PCD_SetAddress+0x40>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fff3 	bl	8006610 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	70fb      	strb	r3, [r7, #3]
 800164e:	460b      	mov	r3, r1
 8001650:	803b      	strh	r3, [r7, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800165a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	da0e      	bge.n	8001680 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	f003 0207 	and.w	r2, r3, #7
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	3310      	adds	r3, #16
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	705a      	strb	r2, [r3, #1]
 800167e:	e00e      	b.n	800169e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	f003 0207 	and.w	r2, r3, #7
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016aa:	883a      	ldrh	r2, [r7, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	78ba      	ldrb	r2, [r7, #2]
 80016b4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016b6:	78bb      	ldrb	r3, [r7, #2]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d102      	bne.n	80016c2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_PCD_EP_Open+0x94>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e00e      	b.n	80016ee <HAL_PCD_EP_Open+0xb2>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fd3c 	bl	800415c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80016ec:	7afb      	ldrb	r3, [r7, #11]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da0e      	bge.n	8001728 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 0207 	and.w	r2, r3, #7
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	3310      	adds	r3, #16
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	705a      	strb	r2, [r3, #1]
 8001726:	e00e      	b.n	8001746 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	f003 0207 	and.w	r2, r3, #7
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	b2da      	uxtb	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_PCD_EP_Close+0x6a>
 800175c:	2302      	movs	r3, #2
 800175e:	e00e      	b.n	800177e <HAL_PCD_EP_Close+0x88>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f8b4 	bl	80048dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	460b      	mov	r3, r1
 8001794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	f003 0207 	and.w	r2, r3, #7
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2200      	movs	r2, #0
 80017c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6979      	ldr	r1, [r7, #20]
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 fa6b 	bl	8004cb4 <USB_EPStartXfer>

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	f003 0207 	and.w	r2, r3, #7
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	460b      	mov	r3, r1
 8001824:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001826:	7afb      	ldrb	r3, [r7, #11]
 8001828:	f003 0207 	and.w	r2, r3, #7
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	3310      	adds	r3, #16
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2201      	movs	r2, #1
 8001860:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001862:	7afb      	ldrb	r3, [r7, #11]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	b2da      	uxtb	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6979      	ldr	r1, [r7, #20]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fa1d 	bl	8004cb4 <USB_EPStartXfer>

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	7912      	ldrb	r2, [r2, #4]
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e04c      	b.n	800193c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da0e      	bge.n	80018c8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 0207 	and.w	r2, r3, #7
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	3310      	adds	r3, #16
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2201      	movs	r2, #1
 80018c4:	705a      	strb	r2, [r3, #1]
 80018c6:	e00c      	b.n	80018e2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_PCD_EP_SetStall+0x7e>
 80018fe:	2302      	movs	r3, #2
 8001900:	e01c      	b.n	800193c <HAL_PCD_EP_SetStall+0xb8>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fd80 	bl	8006416 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	2b00      	cmp	r3, #0
 800191e:	d108      	bne.n	8001932 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f004 fea5 	bl	800667c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	7912      	ldrb	r2, [r2, #4]
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e040      	b.n	80019e4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001966:	2b00      	cmp	r3, #0
 8001968:	da0e      	bge.n	8001988 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	f003 0207 	and.w	r2, r3, #7
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	3310      	adds	r3, #16
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	705a      	strb	r2, [r3, #1]
 8001986:	e00e      	b.n	80019a6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f003 0207 	and.w	r2, r3, #7
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_PCD_EP_ClrStall+0x82>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e00e      	b.n	80019e4 <HAL_PCD_EP_ClrStall+0xa0>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68f9      	ldr	r1, [r7, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f004 fd6e 	bl	80064b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b096      	sub	sp, #88	; 0x58
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019f4:	e3bc      	b.n	8002170 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001a10:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f040 8176 	bne.w	8001d06 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d14f      	bne.n	8001ac6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a36:	81fb      	strh	r3, [r7, #14]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	89fb      	ldrh	r3, [r7, #14]
 8001a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3310      	adds	r3, #16
 8001a4e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	3302      	adds	r3, #2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	441a      	add	r2, r3
 8001a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f006 fbf4 	bl	800827a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7b5b      	ldrb	r3, [r3, #13]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8369 	beq.w	8002170 <PCD_EP_ISR_Handler+0x784>
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 8364 	bne.w	8002170 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7b5b      	ldrb	r3, [r3, #13]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b292      	uxth	r2, r2
 8001aba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	735a      	strb	r2, [r3, #13]
 8001ac4:	e354      	b.n	8002170 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001acc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ad8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d034      	beq.n	8001b4e <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	3306      	adds	r3, #6
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b20:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	f004 fdfa 	bl	800671c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b34:	4013      	ands	r3, r2
 8001b36:	823b      	strh	r3, [r7, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	8a3a      	ldrh	r2, [r7, #16]
 8001b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b42:	b292      	uxth	r2, r2
 8001b44:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f006 fb6a 	bl	8008220 <HAL_PCD_SetupStageCallback>
 8001b4c:	e310      	b.n	8002170 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b4e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f280 830c 	bge.w	8002170 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b64:	4013      	ands	r3, r2
 8001b66:	83fb      	strh	r3, [r7, #30]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	8bfa      	ldrh	r2, [r7, #30]
 8001b6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b72:	b292      	uxth	r2, r2
 8001b74:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d019      	beq.n	8001bde <PCD_EP_ISR_Handler+0x1f2>
 8001baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d015      	beq.n	8001bde <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb8:	6959      	ldr	r1, [r3, #20]
 8001bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f004 fdaa 	bl	800671c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	441a      	add	r2, r3
 8001bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f006 fb33 	bl	8008244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001be8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 82bd 	bne.w	8002170 <PCD_EP_ISR_Handler+0x784>
 8001bf6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bfa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001bfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001c02:	f000 82b5 	beq.w	8002170 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c3c:	d91d      	bls.n	8001c7a <PCD_EP_ISR_Handler+0x28e>
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	647b      	str	r3, [r7, #68]	; 0x44
 8001c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <PCD_EP_ISR_Handler+0x26c>
 8001c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c54:	3b01      	subs	r3, #1
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	029b      	lsls	r3, r3, #10
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	801a      	strh	r2, [r3, #0]
 8001c78:	e026      	b.n	8001cc8 <PCD_EP_ISR_Handler+0x2dc>
 8001c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10a      	bne.n	8001c98 <PCD_EP_ISR_Handler+0x2ac>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	e017      	b.n	8001cc8 <PCD_EP_ISR_Handler+0x2dc>
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <PCD_EP_ISR_Handler+0x2c6>
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	3301      	adds	r3, #1
 8001cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd8:	827b      	strh	r3, [r7, #18]
 8001cda:	8a7b      	ldrh	r3, [r7, #18]
 8001cdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ce0:	827b      	strh	r3, [r7, #18]
 8001ce2:	8a7b      	ldrh	r3, [r7, #18]
 8001ce4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ce8:	827b      	strh	r3, [r7, #18]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	8a7b      	ldrh	r3, [r7, #18]
 8001cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]
 8001d04:	e234      	b.n	8002170 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d1a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f280 80fc 	bge.w	8001f1c <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d56:	b292      	uxth	r2, r2
 8001d58:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d5a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d125      	bne.n	8001dc4 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3306      	adds	r3, #6
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001da4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8092 	beq.w	8001ed2 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	6959      	ldr	r1, [r3, #20]
 8001db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db8:	88da      	ldrh	r2, [r3, #6]
 8001dba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001dbe:	f004 fcad 	bl	800671c <USB_ReadPMA>
 8001dc2:	e086      	b.n	8001ed2 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	78db      	ldrb	r3, [r3, #3]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d10a      	bne.n	8001de2 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f9d9 	bl	800218c <HAL_PCD_EP_DB_Receive>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001de0:	e077      	b.n	8001ed2 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	441a      	add	r2, r3
 8001e0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d024      	beq.n	8001e8a <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	3302      	adds	r3, #2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e68:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d02e      	beq.n	8001ed2 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7a:	6959      	ldr	r1, [r3, #20]
 8001e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7e:	891a      	ldrh	r2, [r3, #8]
 8001e80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e84:	f004 fc4a 	bl	800671c <USB_ReadPMA>
 8001e88:	e023      	b.n	8001ed2 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3306      	adds	r3, #6
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001eb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	6959      	ldr	r1, [r3, #20]
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec8:	895a      	ldrh	r2, [r3, #10]
 8001eca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ece:	f004 fc25 	bl	800671c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001eda:	441a      	add	r2, r3
 8001edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ede:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ee8:	441a      	add	r2, r3
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <PCD_EP_ISR_Handler+0x516>
 8001ef6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d206      	bcs.n	8001f10 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f006 f99b 	bl	8008244 <HAL_PCD_DataOutStageCallback>
 8001f0e:	e005      	b.n	8001f1c <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fecc 	bl	8004cb4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8123 	beq.w	8002170 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f2a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	3310      	adds	r3, #16
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	441a      	add	r2, r3
 8001f6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7c:	78db      	ldrb	r3, [r3, #3]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	f040 80a2 	bne.w	80020c8 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8c:	7b1b      	ldrb	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8093 	beq.w	80020ba <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d046      	beq.n	800202e <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa2:	785b      	ldrb	r3, [r3, #1]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d126      	bne.n	8001ff6 <PCD_EP_ISR_Handler+0x60a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	4413      	add	r3, r2
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	011a      	lsls	r2, r3, #4
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	4413      	add	r3, r2
 8001fca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	801a      	strh	r2, [r3, #0]
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	e061      	b.n	80020ba <PCD_EP_ISR_Handler+0x6ce>
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d15d      	bne.n	80020ba <PCD_EP_ISR_Handler+0x6ce>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	4413      	add	r3, r2
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	011a      	lsls	r2, r3, #4
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	4413      	add	r3, r2
 8002020:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
 800202c:	e045      	b.n	80020ba <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002036:	785b      	ldrb	r3, [r3, #1]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d126      	bne.n	800208a <PCD_EP_ISR_Handler+0x69e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	637b      	str	r3, [r7, #52]	; 0x34
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204a:	b29b      	uxth	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	4413      	add	r3, r2
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
 8002054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	011a      	lsls	r2, r3, #4
 800205a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205c:	4413      	add	r3, r2
 800205e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
 8002064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206e:	b29a      	uxth	r2, r3
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002082:	b29a      	uxth	r2, r3
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	801a      	strh	r2, [r3, #0]
 8002088:	e017      	b.n	80020ba <PCD_EP_ISR_Handler+0x6ce>
 800208a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d113      	bne.n	80020ba <PCD_EP_ISR_Handler+0x6ce>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a0:	4413      	add	r3, r2
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	011a      	lsls	r2, r3, #4
 80020aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ac:	4413      	add	r3, r2
 80020ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b6:	2200      	movs	r2, #0
 80020b8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f006 f8da 	bl	800827a <HAL_PCD_DataInStageCallback>
 80020c6:	e053      	b.n	8002170 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d146      	bne.n	8002162 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020dc:	b29b      	uxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	3302      	adds	r3, #2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002108:	429a      	cmp	r2, r3
 800210a:	d907      	bls.n	800211c <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 800210c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002114:	1ad2      	subs	r2, r2, r3
 8002116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002118:	619a      	str	r2, [r3, #24]
 800211a:	e002      	b.n	8002122 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 800211c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800212a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f006 f8a2 	bl	800827a <HAL_PCD_DataInStageCallback>
 8002136:	e01b      	b.n	8002170 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002140:	441a      	add	r2, r3
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002144:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800214e:	441a      	add	r2, r3
 8002150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002152:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fdaa 	bl	8004cb4 <USB_EPStartXfer>
 8002160:	e006      	b.n	8002170 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002162:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002166:	461a      	mov	r2, r3
 8002168:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f91b 	bl	80023a6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002178:	b29b      	uxth	r3, r3
 800217a:	b21b      	sxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	f6ff ac3a 	blt.w	80019f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3758      	adds	r7, #88	; 0x58
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d07e      	beq.n	80022a2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	3302      	adds	r3, #2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	8b7b      	ldrh	r3, [r7, #26]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d306      	bcc.n	80021e6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	8b7b      	ldrh	r3, [r7, #26]
 80021de:	1ad2      	subs	r2, r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	619a      	str	r2, [r3, #24]
 80021e4:	e002      	b.n	80021ec <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d123      	bne.n	800223c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	833b      	strh	r3, [r7, #24]
 8002210:	8b3b      	ldrh	r3, [r7, #24]
 8002212:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002216:	833b      	strh	r3, [r7, #24]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	8b3b      	ldrh	r3, [r7, #24]
 8002228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800222c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002238:	b29b      	uxth	r3, r3
 800223a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01f      	beq.n	8002286 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002260:	82fb      	strh	r3, [r7, #22]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	441a      	add	r2, r3
 8002270:	8afb      	ldrh	r3, [r7, #22]
 8002272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800227a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002282:	b29b      	uxth	r3, r3
 8002284:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002286:	8b7b      	ldrh	r3, [r7, #26]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8087 	beq.w	800239c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6959      	ldr	r1, [r3, #20]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	891a      	ldrh	r2, [r3, #8]
 800229a:	8b7b      	ldrh	r3, [r7, #26]
 800229c:	f004 fa3e 	bl	800671c <USB_ReadPMA>
 80022a0:	e07c      	b.n	800239c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	3306      	adds	r3, #6
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	8b7b      	ldrh	r3, [r7, #26]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d306      	bcc.n	80022e4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	8b7b      	ldrh	r3, [r7, #26]
 80022dc:	1ad2      	subs	r2, r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	619a      	str	r2, [r3, #24]
 80022e2:	e002      	b.n	80022ea <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d123      	bne.n	800233a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230c:	83fb      	strh	r3, [r7, #30]
 800230e:	8bfb      	ldrh	r3, [r7, #30]
 8002310:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002314:	83fb      	strh	r3, [r7, #30]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	441a      	add	r2, r3
 8002324:	8bfb      	ldrh	r3, [r7, #30]
 8002326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800232a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800232e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002336:	b29b      	uxth	r3, r3
 8002338:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11f      	bne.n	8002384 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	83bb      	strh	r3, [r7, #28]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	8bbb      	ldrh	r3, [r7, #28]
 8002370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002380:	b29b      	uxth	r3, r3
 8002382:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002384:	8b7b      	ldrh	r3, [r7, #26]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6959      	ldr	r1, [r3, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	895a      	ldrh	r2, [r3, #10]
 8002396:	8b7b      	ldrh	r3, [r7, #26]
 8002398:	f004 f9c0 	bl	800671c <USB_ReadPMA>
    }
  }

  return count;
 800239c:	8b7b      	ldrh	r3, [r7, #26]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b0a4      	sub	sp, #144	; 0x90
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 81dd 	beq.w	800277a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	3302      	adds	r3, #2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d907      	bls.n	8002408 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002400:	1ad2      	subs	r2, r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	619a      	str	r2, [r3, #24]
 8002406:	e002      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 80b9 	bne.w	800258a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	785b      	ldrb	r3, [r3, #1]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d126      	bne.n	800246e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	4413      	add	r3, r2
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	011a      	lsls	r2, r3, #4
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	4413      	add	r3, r2
 8002442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002452:	b29a      	uxth	r2, r3
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002466:	b29a      	uxth	r2, r3
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	e01a      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d116      	bne.n	80024a4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	4413      	add	r3, r2
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	011a      	lsls	r2, r3, #4
 8002494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002496:	4413      	add	r3, r2
 8002498:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	2200      	movs	r2, #0
 80024a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	785b      	ldrb	r3, [r3, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d126      	bne.n	8002500 <HAL_PCD_EP_DB_Transmit+0x15a>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	011a      	lsls	r2, r3, #4
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	e017      	b.n	8002530 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d113      	bne.n	8002530 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	4413      	add	r3, r2
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	011a      	lsls	r2, r3, #4
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	4413      	add	r3, r2
 8002524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	2200      	movs	r2, #0
 800252e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f005 fe9f 	bl	800827a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 82fc 	beq.w	8002b40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	82fb      	strh	r3, [r7, #22]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	441a      	add	r2, r3
 8002572:	8afb      	ldrh	r3, [r7, #22]
 8002574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002584:	b29b      	uxth	r3, r3
 8002586:	8013      	strh	r3, [r2, #0]
 8002588:	e2da      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d021      	beq.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	441a      	add	r2, r3
 80025c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80025c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f040 82ae 	bne.w	8002b40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025ec:	441a      	add	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025fa:	441a      	add	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d30b      	bcc.n	8002624 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800261c:	1ad2      	subs	r2, r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	621a      	str	r2, [r3, #32]
 8002622:	e017      	b.n	8002654 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d108      	bne.n	800263e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800262c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800263c:	e00a      	b.n	8002654 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	785b      	ldrb	r3, [r3, #1]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d165      	bne.n	8002728 <HAL_PCD_EP_DB_Transmit+0x382>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	4413      	add	r3, r2
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	011a      	lsls	r2, r3, #4
 800267a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267c:	4413      	add	r3, r2
 800267e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002682:	63bb      	str	r3, [r7, #56]	; 0x38
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268e:	b29a      	uxth	r2, r3
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002698:	2b3e      	cmp	r3, #62	; 0x3e
 800269a:	d91d      	bls.n	80026d8 <HAL_PCD_EP_DB_Transmit+0x332>
 800269c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x310>
 80026b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b2:	3b01      	subs	r3, #1
 80026b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026be:	b29b      	uxth	r3, r3
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	e044      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x350>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	e035      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80026fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_PCD_EP_DB_Transmit+0x36a>
 800270a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270c:	3301      	adds	r3, #1
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29a      	uxth	r2, r3
 8002716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002718:	b29b      	uxth	r3, r3
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	b29b      	uxth	r3, r3
 800271e:	4313      	orrs	r3, r2
 8002720:	b29a      	uxth	r2, r3
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	e01c      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d118      	bne.n	8002762 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	647b      	str	r3, [r7, #68]	; 0x44
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002744:	4413      	add	r3, r2
 8002746:	647b      	str	r3, [r7, #68]	; 0x44
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	011a      	lsls	r2, r3, #4
 800274e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002750:	4413      	add	r3, r2
 8002752:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002756:	643b      	str	r3, [r7, #64]	; 0x40
 8002758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275c:	b29a      	uxth	r2, r3
 800275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002760:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	6959      	ldr	r1, [r3, #20]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	891a      	ldrh	r2, [r3, #8]
 800276e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002772:	b29b      	uxth	r3, r3
 8002774:	f003 ff8d 	bl	8006692 <USB_WritePMA>
 8002778:	e1e2      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	3306      	adds	r3, #6
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d307      	bcc.n	80027c2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027ba:	1ad2      	subs	r2, r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	619a      	str	r2, [r3, #24]
 80027c0:	e002      	b.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f040 80c0 	bne.w	8002952 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d126      	bne.n	8002828 <HAL_PCD_EP_DB_Transmit+0x482>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ee:	4413      	add	r3, r2
 80027f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	011a      	lsls	r2, r3, #4
 80027f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027fa:	4413      	add	r3, r2
 80027fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002800:	67bb      	str	r3, [r7, #120]	; 0x78
 8002802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280c:	b29a      	uxth	r2, r3
 800280e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002810:	801a      	strh	r2, [r3, #0]
 8002812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002820:	b29a      	uxth	r2, r3
 8002822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	e01a      	b.n	800285e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d116      	bne.n	800285e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	667b      	str	r3, [r7, #100]	; 0x64
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002844:	4413      	add	r3, r2
 8002846:	667b      	str	r3, [r7, #100]	; 0x64
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	011a      	lsls	r2, r3, #4
 800284e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002850:	4413      	add	r3, r2
 8002852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002856:	663b      	str	r3, [r7, #96]	; 0x60
 8002858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800285a:	2200      	movs	r2, #0
 800285c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	677b      	str	r3, [r7, #116]	; 0x74
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d12b      	bne.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002880:	4413      	add	r3, r2
 8002882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	011a      	lsls	r2, r3, #4
 800288a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288c:	4413      	add	r3, r2
 800288e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002896:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	e017      	b.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d113      	bne.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028da:	4413      	add	r3, r2
 80028dc:	677b      	str	r3, [r7, #116]	; 0x74
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	011a      	lsls	r2, r3, #4
 80028e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e6:	4413      	add	r3, r2
 80028e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ec:	673b      	str	r3, [r7, #112]	; 0x70
 80028ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f0:	2200      	movs	r2, #0
 80028f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f005 fcbd 	bl	800827a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 811a 	bne.w	8002b40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800293c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294c:	b29b      	uxth	r3, r3
 800294e:	8013      	strh	r3, [r2, #0]
 8002950:	e0f6      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d121      	bne.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	441a      	add	r2, r3
 8002988:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800298c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f040 80ca 	bne.w	8002b40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029b4:	441a      	add	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029c2:	441a      	add	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d30b      	bcc.n	80029ec <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	6a1a      	ldr	r2, [r3, #32]
 80029e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029e4:	1ad2      	subs	r2, r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	621a      	str	r2, [r3, #32]
 80029ea:	e017      	b.n	8002a1c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d108      	bne.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80029f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a04:	e00a      	b.n	8002a1c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	657b      	str	r3, [r7, #84]	; 0x54
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d165      	bne.n	8002af6 <HAL_PCD_EP_DB_Transmit+0x750>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3e:	4413      	add	r3, r2
 8002a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	011a      	lsls	r2, r3, #4
 8002a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a66:	2b3e      	cmp	r3, #62	; 0x3e
 8002a68:	d91d      	bls.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x700>
 8002a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a80:	3b01      	subs	r3, #1
 8002a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	029b      	lsls	r3, r3, #10
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4313      	orrs	r3, r2
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa2:	801a      	strh	r2, [r3, #0]
 8002aa4:	e041      	b.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x784>
 8002aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	e032      	b.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x784>
 8002ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8002acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_PCD_EP_DB_Transmit+0x738>
 8002ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ada:	3301      	adds	r3, #1
 8002adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	029b      	lsls	r3, r3, #10
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	e019      	b.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x784>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	785b      	ldrb	r3, [r3, #1]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d115      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x784>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0c:	4413      	add	r3, r2
 8002b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	011a      	lsls	r2, r3, #4
 8002b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b18:	4413      	add	r3, r2
 8002b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b28:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6959      	ldr	r1, [r3, #20]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	895a      	ldrh	r2, [r3, #10]
 8002b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f003 fda9 	bl	8006692 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5a:	82bb      	strh	r3, [r7, #20]
 8002b5c:	8abb      	ldrh	r3, [r7, #20]
 8002b5e:	f083 0310 	eor.w	r3, r3, #16
 8002b62:	82bb      	strh	r3, [r7, #20]
 8002b64:	8abb      	ldrh	r3, [r7, #20]
 8002b66:	f083 0320 	eor.w	r3, r3, #32
 8002b6a:	82bb      	strh	r3, [r7, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	8abb      	ldrh	r3, [r7, #20]
 8002b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3790      	adds	r7, #144	; 0x90
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	817b      	strh	r3, [r7, #10]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bac:	897b      	ldrh	r3, [r7, #10]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	897b      	ldrh	r3, [r7, #10]
 8002bba:	f003 0207 	and.w	r2, r3, #7
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	3310      	adds	r3, #16
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e009      	b.n	8002be4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bd0:	897a      	ldrh	r2, [r7, #10]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002be4:	893b      	ldrh	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	80da      	strh	r2, [r3, #6]
 8002bf8:	e00b      	b.n	8002c12 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e272      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8087 	beq.w	8002d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c40:	4b92      	ldr	r3, [pc, #584]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c4c:	4b8f      	ldr	r3, [pc, #572]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d112      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
 8002c58:	4b8c      	ldr	r3, [pc, #560]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d10b      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c66:	4b89      	ldr	r3, [pc, #548]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d06c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x12c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d168      	bne.n	8002d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e24c      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x76>
 8002c88:	4b80      	ldr	r3, [pc, #512]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7f      	ldr	r2, [pc, #508]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e02e      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x98>
 8002c9e:	4b7b      	ldr	r3, [pc, #492]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a77      	ldr	r2, [pc, #476]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0xbc>
 8002cc2:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a71      	ldr	r2, [pc, #452]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a67      	ldr	r2, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fd ff56 	bl	8000bac <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fd ff52 	bl	8000bac <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e200      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe4>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fd ff42 	bl	8000bac <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fd ff3e 	bl	8000bac <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1ec      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x10c>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d5a:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d66:	4b49      	ldr	r3, [pc, #292]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
 8002d72:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1c0      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4939      	ldr	r1, [pc, #228]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fd fef7 	bl	8000bac <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fd fef3 	bl	8000bac <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1a1      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4927      	ldr	r1, [pc, #156]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fd fed6 	bl	8000bac <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fd fed2 	bl	8000bac <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e180      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d03a      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d019      	beq.n	8002e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7fd feb6 	bl	8000bac <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fd feb2 	bl	8000bac <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e160      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f000 fa9c 	bl	80033a0 <RCC_Delay>
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fd fe9c 	bl	8000bac <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e76:	e00f      	b.n	8002e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fd fe98 	bl	8000bac <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d908      	bls.n	8002e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e146      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	42420000 	.word	0x42420000
 8002e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e9      	bne.n	8002e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a6 	beq.w	8002ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4a87      	ldr	r2, [pc, #540]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	61d3      	str	r3, [r2, #28]
 8002ece:	4b85      	ldr	r3, [pc, #532]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eea:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7e      	ldr	r2, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef6:	f7fd fe59 	bl	8000bac <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fd fe55 	bl	8000bac <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e103      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b75      	ldr	r3, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x312>
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e02d      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x334>
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a69      	ldr	r2, [pc, #420]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a66      	ldr	r2, [pc, #408]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
 8002f52:	e01c      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x356>
 8002f5c:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a60      	ldr	r2, [pc, #384]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6213      	str	r3, [r2, #32]
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f76:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a5a      	ldr	r2, [pc, #360]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fd fe09 	bl	8000bac <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fd fe05 	bl	8000bac <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0b1      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RCC_OscConfig+0x37e>
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fd fdf3 	bl	8000bac <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fdef 	bl	8000bac <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e09b      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b3c      	ldr	r3, [pc, #240]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8087 	beq.w	8003116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d061      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d146      	bne.n	80030aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b33      	ldr	r3, [pc, #204]	; (80030ec <HAL_RCC_OscConfig+0x4cc>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fd fdc3 	bl	8000bac <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302a:	f7fd fdbf 	bl	8000bac <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e06d      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4921      	ldr	r1, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a19      	ldr	r1, [r3, #32]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	430b      	orrs	r3, r1
 8003076:	491b      	ldr	r1, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x4cc>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fd fd93 	bl	8000bac <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308a:	f7fd fd8f 	bl	8000bac <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e03d      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x46a>
 80030a8:	e035      	b.n	8003116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_RCC_OscConfig+0x4cc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fd fd7c 	bl	8000bac <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd fd78 	bl	8000bac <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e026      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x498>
 80030d6:	e01e      	b.n	8003116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e019      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40007000 	.word	0x40007000
 80030ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x500>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	429a      	cmp	r2, r3
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0d0      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	4965      	ldr	r1, [pc, #404]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800318a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d040      	beq.n	8003244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e073      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06b      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4936      	ldr	r1, [pc, #216]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003214:	f7fd fcca 	bl	8000bac <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fd fcc6 	bl	8000bac <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e053      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d210      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0207 	bic.w	r2, r3, #7
 800325a:	4922      	ldr	r1, [pc, #136]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1cc>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1d0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fc28 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	080087e0 	.word	0x080087e0
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000004 	.word	0x20000004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003312:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_RCC_GetSysClockFreq+0x94>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d002      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x30>
 8003322:	2b08      	cmp	r3, #8
 8003324:	d003      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x36>
 8003326:	e027      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800332a:	613b      	str	r3, [r7, #16]
      break;
 800332c:	e027      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0c9b      	lsrs	r3, r3, #18
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	4a17      	ldr	r2, [pc, #92]	; (8003394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCC_GetSysClockFreq+0x94>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c5b      	lsrs	r3, r3, #17
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	4a11      	ldr	r2, [pc, #68]	; (8003398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800335a:	fb03 f202 	mul.w	r2, r3, r2
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e004      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_RCC_GetSysClockFreq+0xa4>)
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	613b      	str	r3, [r7, #16]
      break;
 8003376:	e002      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800337a:	613b      	str	r3, [r7, #16]
      break;
 800337c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337e:	693b      	ldr	r3, [r7, #16]
}
 8003380:	4618      	mov	r0, r3
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	007a1200 	.word	0x007a1200
 8003394:	080087f0 	.word	0x080087f0
 8003398:	08008800 	.word	0x08008800
 800339c:	003d0900 	.word	0x003d0900

080033a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <RCC_Delay+0x34>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <RCC_Delay+0x38>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0a5b      	lsrs	r3, r3, #9
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033bc:	bf00      	nop
  }
  while (Delay --);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	60fa      	str	r2, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f9      	bne.n	80033bc <RCC_Delay+0x1c>
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	20000000 	.word	0x20000000
 80033d8:	10624dd3 	.word	0x10624dd3

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d07d      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fc:	4b4f      	ldr	r3, [pc, #316]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10d      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b4c      	ldr	r3, [pc, #304]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	4a4b      	ldr	r2, [pc, #300]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	61d3      	str	r3, [r2, #28]
 8003414:	4b49      	ldr	r3, [pc, #292]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d118      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003430:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a42      	ldr	r2, [pc, #264]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343c:	f7fd fbb6 	bl	8000bac <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	e008      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003444:	f7fd fbb2 	bl	8000bac <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e06d      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003462:	4b36      	ldr	r3, [pc, #216]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02e      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	429a      	cmp	r2, r3
 800347e:	d027      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003480:	4b2e      	ldr	r3, [pc, #184]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003488:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003490:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d014      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fd fb81 	bl	8000bac <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fd fb7d 	bl	8000bac <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e036      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c4:	4b1d      	ldr	r3, [pc, #116]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ee      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4917      	ldr	r1, [pc, #92]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	490b      	ldr	r1, [pc, #44]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4904      	ldr	r1, [pc, #16]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	40007000 	.word	0x40007000
 8003544:	42420440 	.word	0x42420440

08003548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e076      	b.n	8003648 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d009      	beq.n	8003580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
 8003572:	e005      	b.n	8003580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fa06 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	ea42 0103 	orr.w	r1, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	0c1a      	lsrs	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f002 0204 	and.w	r2, r2, #4
 8003626:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003660:	f7fd faa4 	bl	8000bac <HAL_GetTick>
 8003664:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	e12a      	b.n	80038d0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_SPI_Transmit+0x36>
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e122      	b.n	80038d0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_SPI_Transmit+0x48>
 8003694:	2302      	movs	r3, #2
 8003696:	e11b      	b.n	80038d0 <HAL_SPI_Transmit+0x280>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2203      	movs	r2, #3
 80036a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	88fa      	ldrh	r2, [r7, #6]
 80036be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e6:	d10f      	bne.n	8003708 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003706:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d007      	beq.n	8003726 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372e:	d152      	bne.n	80037d6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_SPI_Transmit+0xee>
 8003738:	8b7b      	ldrh	r3, [r7, #26]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d145      	bne.n	80037ca <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003762:	e032      	b.n	80037ca <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d112      	bne.n	8003798 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	86da      	strh	r2, [r3, #54]	; 0x36
 8003796:	e018      	b.n	80037ca <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003798:	f7fd fa08 	bl	8000bac <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d803      	bhi.n	80037b0 <HAL_SPI_Transmit+0x160>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d102      	bne.n	80037b6 <HAL_SPI_Transmit+0x166>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e082      	b.n	80038d0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1c7      	bne.n	8003764 <HAL_SPI_Transmit+0x114>
 80037d4:	e053      	b.n	800387e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_SPI_Transmit+0x194>
 80037de:	8b7b      	ldrh	r3, [r7, #26]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d147      	bne.n	8003874 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800380a:	e033      	b.n	8003874 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d113      	bne.n	8003842 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	330c      	adds	r3, #12
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003840:	e018      	b.n	8003874 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003842:	f7fd f9b3 	bl	8000bac <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d803      	bhi.n	800385a <HAL_SPI_Transmit+0x20a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d102      	bne.n	8003860 <HAL_SPI_Transmit+0x210>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e02d      	b.n	80038d0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1c6      	bne.n	800380c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	6839      	ldr	r1, [r7, #0]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fbd2 	bl	800402c <SPI_EndRxTxTransaction>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
 80038f6:	e104      	b.n	8003b02 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003900:	d112      	bne.n	8003928 <HAL_SPI_Receive+0x50>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10e      	bne.n	8003928 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2204      	movs	r2, #4
 800390e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f8f3 	bl	8003b0a <HAL_SPI_TransmitReceive>
 8003924:	4603      	mov	r3, r0
 8003926:	e0ec      	b.n	8003b02 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003928:	f7fd f940 	bl	8000bac <HAL_GetTick>
 800392c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_SPI_Receive+0x62>
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0e1      	b.n	8003b02 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_SPI_Receive+0x74>
 8003948:	2302      	movs	r3, #2
 800394a:	e0da      	b.n	8003b02 <HAL_SPI_Receive+0x22a>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2204      	movs	r2, #4
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	88fa      	ldrh	r2, [r7, #6]
 800396c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399a:	d10f      	bne.n	80039bc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d007      	beq.n	80039da <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d170      	bne.n	8003ac4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039e2:	e035      	b.n	8003a50 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d115      	bne.n	8003a1e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f103 020c 	add.w	r2, r3, #12
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	7812      	ldrb	r2, [r2, #0]
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a1c:	e018      	b.n	8003a50 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a1e:	f7fd f8c5 	bl	8000bac <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d803      	bhi.n	8003a36 <HAL_SPI_Receive+0x15e>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d102      	bne.n	8003a3c <HAL_SPI_Receive+0x164>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e058      	b.n	8003b02 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1c4      	bne.n	80039e4 <HAL_SPI_Receive+0x10c>
 8003a5a:	e038      	b.n	8003ace <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d113      	bne.n	8003a92 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	b292      	uxth	r2, r2
 8003a76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	1c9a      	adds	r2, r3, #2
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a90:	e018      	b.n	8003ac4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a92:	f7fd f88b 	bl	8000bac <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d803      	bhi.n	8003aaa <HAL_SPI_Receive+0x1d2>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Receive+0x1d8>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e01e      	b.n	8003b02 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1c6      	bne.n	8003a5c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fa58 	bl	8003f88 <SPI_EndRxTransaction>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b08a      	sub	sp, #40	; 0x28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b1c:	f7fd f846 	bl	8000bac <HAL_GetTick>
 8003b20:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b28:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b30:	887b      	ldrh	r3, [r7, #2]
 8003b32:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b34:	7ffb      	ldrb	r3, [r7, #31]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d00c      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x4a>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b40:	d106      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x46>
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d001      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
 8003b52:	e17f      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x5c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x5c>
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e174      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x6e>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e16d      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x34a>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d003      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2205      	movs	r2, #5
 8003b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	887a      	ldrh	r2, [r7, #2]
 8003baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	887a      	ldrh	r2, [r7, #2]
 8003bb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d007      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d17e      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_SPI_TransmitReceive+0xf6>
 8003bfa:	8afb      	ldrh	r3, [r7, #22]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d16c      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c24:	e059      	b.n	8003cda <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d11b      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x162>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x162>
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d113      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d119      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x1a4>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d014      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	1c9a      	adds	r2, r3, #2
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003caa:	2301      	movs	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cae:	f7fc ff7d 	bl	8000bac <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d80d      	bhi.n	8003cda <HAL_SPI_TransmitReceive+0x1d0>
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d009      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0bc      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1a0      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x11c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d19b      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x11c>
 8003cee:	e082      	b.n	8003df6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x1f4>
 8003cf8:	8afb      	ldrh	r3, [r7, #22]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d171      	bne.n	8003de2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d24:	e05d      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d11c      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x264>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d017      	beq.n	8003d6e <HAL_SPI_TransmitReceive+0x264>
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d114      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	7812      	ldrb	r2, [r2, #0]
 8003d50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d119      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x2a6>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d014      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dac:	2301      	movs	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003db0:	f7fc fefc 	bl	8000bac <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d803      	bhi.n	8003dc8 <HAL_SPI_TransmitReceive+0x2be>
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d102      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x2c4>
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e038      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d19c      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x21c>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d197      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003df6:	6a3a      	ldr	r2, [r7, #32]
 8003df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f916 	bl	800402c <SPI_EndRxTxTransaction>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e01d      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3728      	adds	r7, #40	; 0x28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e6a:	b2db      	uxtb	r3, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
	...

08003e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e88:	f7fc fe90 	bl	8000bac <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	4413      	add	r3, r2
 8003e96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e98:	f7fc fe88 	bl	8000bac <HAL_GetTick>
 8003e9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e9e:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	015b      	lsls	r3, r3, #5
 8003ea4:	0d1b      	lsrs	r3, r3, #20
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eae:	e054      	b.n	8003f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	d050      	beq.n	8003f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eb8:	f7fc fe78 	bl	8000bac <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d902      	bls.n	8003ece <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d13d      	bne.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003edc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee6:	d111      	bne.n	8003f0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef0:	d004      	beq.n	8003efc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efa:	d107      	bne.n	8003f0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f14:	d10f      	bne.n	8003f36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e017      	b.n	8003f7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d19b      	bne.n	8003eb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000000 	.word	0x20000000

08003f88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9c:	d111      	bne.n	8003fc2 <SPI_EndRxTransaction+0x3a>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa6:	d004      	beq.n	8003fb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d107      	bne.n	8003fc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fca:	d117      	bne.n	8003ffc <SPI_EndRxTransaction+0x74>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd4:	d112      	bne.n	8003ffc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2101      	movs	r1, #1
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f7ff ff49 	bl	8003e78 <SPI_WaitFlagStateUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01a      	beq.n	8004022 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0220 	orr.w	r2, r3, #32
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e013      	b.n	8004024 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff ff36 	bl	8003e78 <SPI_WaitFlagStateUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e000      	b.n	8004024 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2201      	movs	r2, #1
 8004040:	2102      	movs	r1, #2
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff ff18 	bl	8003e78 <SPI_WaitFlagStateUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e013      	b.n	8004086 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff ff05 	bl	8003e78 <SPI_WaitFlagStateUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d007      	beq.n	8004084 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e000      	b.n	8004086 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	4638      	mov	r0, r7
 8004098:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4013      	ands	r3, r2
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	4638      	mov	r0, r7
 800412a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
	...

0800415c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800415c:	b480      	push	{r7}
 800415e:	b09d      	sub	sp, #116	; 0x74
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	78db      	ldrb	r3, [r3, #3]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d81f      	bhi.n	80041ce <USB_ActivateEndpoint+0x72>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <USB_ActivateEndpoint+0x38>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041a5 	.word	0x080041a5
 8004198:	080041c1 	.word	0x080041c1
 800419c:	080041d7 	.word	0x080041d7
 80041a0:	080041b3 	.word	0x080041b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80041b0:	e012      	b.n	80041d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80041ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80041be:	e00b      	b.n	80041d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80041cc:	e004      	b.n	80041d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80041d4:	e000      	b.n	80041d8 <USB_ActivateEndpoint+0x7c>
      break;
 80041d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004210:	b29a      	uxth	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800422c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423c:	b29b      	uxth	r3, r3
 800423e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	7b1b      	ldrb	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f040 8178 	bne.w	800453a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 8084 	beq.w	800435c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	4413      	add	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	011a      	lsls	r2, r3, #4
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	88db      	ldrh	r3, [r3, #6]
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	b29b      	uxth	r3, r3
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	827b      	strh	r3, [r7, #18]
 8004296:	8a7b      	ldrh	r3, [r7, #18]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01b      	beq.n	80042d8 <USB_ActivateEndpoint+0x17c>
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	823b      	strh	r3, [r7, #16]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	8a3b      	ldrh	r3, [r7, #16]
 80042c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	78db      	ldrb	r3, [r3, #3]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d020      	beq.n	8004322 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f6:	81bb      	strh	r3, [r7, #12]
 80042f8:	89bb      	ldrh	r3, [r7, #12]
 80042fa:	f083 0320 	eor.w	r3, r3, #32
 80042fe:	81bb      	strh	r3, [r7, #12]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	89bb      	ldrh	r3, [r7, #12]
 800430c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431c:	b29b      	uxth	r3, r3
 800431e:	8013      	strh	r3, [r2, #0]
 8004320:	e2d5      	b.n	80048ce <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004338:	81fb      	strh	r3, [r7, #14]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	89fb      	ldrh	r3, [r7, #14]
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]
 800435a:	e2b8      	b.n	80048ce <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	633b      	str	r3, [r7, #48]	; 0x30
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004366:	b29b      	uxth	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	4413      	add	r3, r2
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	011a      	lsls	r2, r3, #4
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	4413      	add	r3, r2
 800437a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	88db      	ldrh	r3, [r3, #6]
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	b29b      	uxth	r3, r3
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439a:	b29b      	uxth	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	4413      	add	r3, r2
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	011a      	lsls	r2, r3, #4
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	4413      	add	r3, r2
 80043ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b3e      	cmp	r3, #62	; 0x3e
 80043ca:	d91d      	bls.n	8004408 <USB_ActivateEndpoint+0x2ac>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <USB_ActivateEndpoint+0x28a>
 80043e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e2:	3b01      	subs	r3, #1
 80043e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004400:	b29a      	uxth	r2, r3
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	e026      	b.n	8004456 <USB_ActivateEndpoint+0x2fa>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <USB_ActivateEndpoint+0x2ca>
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441e:	b29a      	uxth	r2, r3
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e017      	b.n	8004456 <USB_ActivateEndpoint+0x2fa>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	66bb      	str	r3, [r7, #104]	; 0x68
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <USB_ActivateEndpoint+0x2e4>
 800443a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800443c:	3301      	adds	r3, #1
 800443e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29a      	uxth	r2, r3
 8004446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004448:	b29b      	uxth	r3, r3
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	b29b      	uxth	r3, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	b29a      	uxth	r2, r3
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	847b      	strh	r3, [r7, #34]	; 0x22
 8004464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01b      	beq.n	80044a6 <USB_ActivateEndpoint+0x34a>
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	843b      	strh	r3, [r7, #32]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	8c3b      	ldrh	r3, [r7, #32]
 8004492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d124      	bne.n	80044f8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c4:	83bb      	strh	r3, [r7, #28]
 80044c6:	8bbb      	ldrh	r3, [r7, #28]
 80044c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044cc:	83bb      	strh	r3, [r7, #28]
 80044ce:	8bbb      	ldrh	r3, [r7, #28]
 80044d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044d4:	83bb      	strh	r3, [r7, #28]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	8bbb      	ldrh	r3, [r7, #28]
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]
 80044f6:	e1ea      	b.n	80048ce <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	83fb      	strh	r3, [r7, #30]
 8004510:	8bfb      	ldrh	r3, [r7, #30]
 8004512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004516:	83fb      	strh	r3, [r7, #30]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	441a      	add	r2, r3
 8004522:	8bfb      	ldrh	r3, [r7, #30]
 8004524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]
 8004538:	e1c9      	b.n	80048ce <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	78db      	ldrb	r3, [r3, #3]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d11e      	bne.n	8004580 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004558:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800456a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004572:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]
 800457e:	e01d      	b.n	80045bc <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045cc:	4413      	add	r3, r2
 80045ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045de:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	891b      	ldrh	r3, [r3, #8]
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ee:	801a      	strh	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	657b      	str	r3, [r7, #84]	; 0x54
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004600:	4413      	add	r3, r2
 8004602:	657b      	str	r3, [r7, #84]	; 0x54
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	011a      	lsls	r2, r3, #4
 800460a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460c:	4413      	add	r3, r2
 800460e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004612:	653b      	str	r3, [r7, #80]	; 0x50
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	895b      	ldrh	r3, [r3, #10]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004622:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	785b      	ldrb	r3, [r3, #1]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8093 	bne.w	8004754 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800463e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01b      	beq.n	8004682 <USB_ActivateEndpoint+0x526>
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	441a      	add	r2, r3
 800466c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800466e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800467a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467e:	b29b      	uxth	r3, r3
 8004680:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004690:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01b      	beq.n	80046d2 <USB_ActivateEndpoint+0x576>
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80046ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80046f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	441a      	add	r2, r3
 8004704:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004716:	b29b      	uxth	r3, r3
 8004718:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004730:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800473e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]
 8004752:	e0bc      	b.n	80048ce <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01d      	beq.n	80047ac <USB_ActivateEndpoint+0x650>
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01d      	beq.n	8004804 <USB_ActivateEndpoint+0x6a8>
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	441a      	add	r2, r3
 80047ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004800:	b29b      	uxth	r3, r3
 8004802:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	78db      	ldrb	r3, [r3, #3]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d024      	beq.n	8004856 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004822:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004826:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800482a:	f083 0320 	eor.w	r3, r3, #32
 800482e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004850:	b29b      	uxth	r3, r3
 8004852:	8013      	strh	r3, [r2, #0]
 8004854:	e01d      	b.n	8004892 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80048ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3774      	adds	r7, #116	; 0x74
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048dc:	b480      	push	{r7}
 80048de:	b08d      	sub	sp, #52	; 0x34
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	7b1b      	ldrb	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 808e 	bne.w	8004a0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d044      	beq.n	8004982 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	81bb      	strh	r3, [r7, #12]
 8004906:	89bb      	ldrh	r3, [r7, #12]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01b      	beq.n	8004948 <USB_DeactivateEndpoint+0x6c>
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	817b      	strh	r3, [r7, #10]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495e:	813b      	strh	r3, [r7, #8]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	893b      	ldrh	r3, [r7, #8]
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]
 8004980:	e192      	b.n	8004ca8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	827b      	strh	r3, [r7, #18]
 8004990:	8a7b      	ldrh	r3, [r7, #18]
 8004992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01b      	beq.n	80049d2 <USB_DeactivateEndpoint+0xf6>
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	823b      	strh	r3, [r7, #16]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	441a      	add	r2, r3
 80049bc:	8a3b      	ldrh	r3, [r7, #16]
 80049be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e8:	81fb      	strh	r3, [r7, #14]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]
 8004a0a:	e14d      	b.n	8004ca8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 80a5 	bne.w	8004b60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	843b      	strh	r3, [r7, #32]
 8004a24:	8c3b      	ldrh	r3, [r7, #32]
 8004a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01b      	beq.n	8004a66 <USB_DeactivateEndpoint+0x18a>
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a44:	83fb      	strh	r3, [r7, #30]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	8bfb      	ldrh	r3, [r7, #30]
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	83bb      	strh	r3, [r7, #28]
 8004a74:	8bbb      	ldrh	r3, [r7, #28]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01b      	beq.n	8004ab6 <USB_DeactivateEndpoint+0x1da>
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a94:	837b      	strh	r3, [r7, #26]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8b7b      	ldrh	r3, [r7, #26]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	833b      	strh	r3, [r7, #24]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8b3b      	ldrh	r3, [r7, #24]
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	82fb      	strh	r3, [r7, #22]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8afb      	ldrh	r3, [r7, #22]
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3c:	82bb      	strh	r3, [r7, #20]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	8abb      	ldrh	r3, [r7, #20]
 8004b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8013      	strh	r3, [r2, #0]
 8004b5e:	e0a3      	b.n	8004ca8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <USB_DeactivateEndpoint+0x2d4>
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004bbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01b      	beq.n	8004c00 <USB_DeactivateEndpoint+0x324>
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	853b      	strh	r3, [r7, #40]	; 0x28
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3734      	adds	r7, #52	; 0x34
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b0c2      	sub	sp, #264	; 0x108
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cc2:	6018      	str	r0, [r3, #0]
 8004cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ccc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	f040 86b7 	bne.w	8005a4e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d908      	bls.n	8004d0e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d0c:	e007      	b.n	8004d1e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	7b1b      	ldrb	r3, [r3, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d13a      	bne.n	8004da4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6959      	ldr	r1, [r3, #20]
 8004d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	88da      	ldrh	r2, [r3, #6]
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004d54:	6800      	ldr	r0, [r0, #0]
 8004d56:	f001 fc9c 	bl	8006692 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	011a      	lsls	r2, r3, #4
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	f000 be1f 	b.w	80059e2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	78db      	ldrb	r3, [r3, #3]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	f040 8462 	bne.w	800567a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6a1a      	ldr	r2, [r3, #32]
 8004dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	f240 83df 	bls.w	8005592 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6a1a      	ldr	r2, [r3, #32]
 8004e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e40:	1ad2      	subs	r2, r2, r3
 8004e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 81c7 	beq.w	8005204 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	633b      	str	r3, [r7, #48]	; 0x30
 8004e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d177      	bne.n	8004f82 <USB_EPStartXfer+0x2ce>
 8004e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	4413      	add	r3, r2
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	011a      	lsls	r2, r3, #4
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee4:	d921      	bls.n	8004f2a <USB_EPStartXfer+0x276>
 8004ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <USB_EPStartXfer+0x252>
 8004efc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f00:	3b01      	subs	r3, #1
 8004f02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	029b      	lsls	r3, r3, #10
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4313      	orrs	r3, r2
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	e050      	b.n	8004fcc <USB_EPStartXfer+0x318>
 8004f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <USB_EPStartXfer+0x294>
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	e041      	b.n	8004fcc <USB_EPStartXfer+0x318>
 8004f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <USB_EPStartXfer+0x2b4>
 8004f5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f62:	3301      	adds	r3, #1
 8004f64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	029b      	lsls	r3, r3, #10
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	e024      	b.n	8004fcc <USB_EPStartXfer+0x318>
 8004f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d11c      	bne.n	8004fcc <USB_EPStartXfer+0x318>
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	4413      	add	r3, r2
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	011a      	lsls	r2, r3, #4
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	4413      	add	r3, r2
 8004fbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	895b      	ldrh	r3, [r3, #10]
 8004fd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6959      	ldr	r1, [r3, #20]
 8004fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004ff2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ff6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	f001 fb49 	bl	8006692 <USB_WritePMA>
            ep->xfer_buff += len;
 8005000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005010:	441a      	add	r2, r3
 8005012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800501e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a1a      	ldr	r2, [r3, #32]
 800502a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	429a      	cmp	r2, r3
 8005038:	d90f      	bls.n	800505a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800503a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a1a      	ldr	r2, [r3, #32]
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504a:	1ad2      	subs	r2, r2, r3
 800504c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	621a      	str	r2, [r3, #32]
 8005058:	e00e      	b.n	8005078 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800505a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800505e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800506a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2200      	movs	r2, #0
 8005076:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d177      	bne.n	8005178 <USB_EPStartXfer+0x4c4>
 8005088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	4413      	add	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	011a      	lsls	r2, r3, #4
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	4413      	add	r3, r2
 80050be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d8:	2b3e      	cmp	r3, #62	; 0x3e
 80050da:	d921      	bls.n	8005120 <USB_EPStartXfer+0x46c>
 80050dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <USB_EPStartXfer+0x448>
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f6:	3b01      	subs	r3, #1
 80050f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29a      	uxth	r2, r3
 8005102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005106:	b29b      	uxth	r3, r3
 8005108:	029b      	lsls	r3, r3, #10
 800510a:	b29b      	uxth	r3, r3
 800510c:	4313      	orrs	r3, r2
 800510e:	b29b      	uxth	r3, r3
 8005110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005118:	b29a      	uxth	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	e056      	b.n	80051ce <USB_EPStartXfer+0x51a>
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <USB_EPStartXfer+0x48a>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005136:	b29a      	uxth	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e047      	b.n	80051ce <USB_EPStartXfer+0x51a>
 800513e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <USB_EPStartXfer+0x4aa>
 8005154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005158:	3301      	adds	r3, #1
 800515a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29a      	uxth	r2, r3
 8005164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005168:	b29b      	uxth	r3, r3
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	b29b      	uxth	r3, r3
 800516e:	4313      	orrs	r3, r2
 8005170:	b29a      	uxth	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	e02a      	b.n	80051ce <USB_EPStartXfer+0x51a>
 8005178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d122      	bne.n	80051ce <USB_EPStartXfer+0x51a>
 8005188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	623b      	str	r3, [r7, #32]
 8005194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	4413      	add	r3, r2
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	011a      	lsls	r2, r3, #4
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	4413      	add	r3, r2
 80051be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	891b      	ldrh	r3, [r3, #8]
 80051da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6959      	ldr	r1, [r3, #20]
 80051ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051fc:	6800      	ldr	r0, [r0, #0]
 80051fe:	f001 fa48 	bl	8006692 <USB_WritePMA>
 8005202:	e3ee      	b.n	80059e2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d177      	bne.n	8005304 <USB_EPStartXfer+0x650>
 8005214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005234:	4413      	add	r3, r2
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48
 8005238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	011a      	lsls	r2, r3, #4
 8005246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005248:	4413      	add	r3, r2
 800524a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800524e:	647b      	str	r3, [r7, #68]	; 0x44
 8005250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525a:	b29a      	uxth	r2, r3
 800525c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005264:	2b3e      	cmp	r3, #62	; 0x3e
 8005266:	d921      	bls.n	80052ac <USB_EPStartXfer+0x5f8>
 8005268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <USB_EPStartXfer+0x5d4>
 800527e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005282:	3b01      	subs	r3, #1
 8005284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005292:	b29b      	uxth	r3, r3
 8005294:	029b      	lsls	r3, r3, #10
 8005296:	b29b      	uxth	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a8:	801a      	strh	r2, [r3, #0]
 80052aa:	e056      	b.n	800535a <USB_EPStartXfer+0x6a6>
 80052ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <USB_EPStartXfer+0x616>
 80052b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	e047      	b.n	800535a <USB_EPStartXfer+0x6a6>
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <USB_EPStartXfer+0x636>
 80052e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052e4:	3301      	adds	r3, #1
 80052e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	e02a      	b.n	800535a <USB_EPStartXfer+0x6a6>
 8005304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d122      	bne.n	800535a <USB_EPStartXfer+0x6a6>
 8005314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	653b      	str	r3, [r7, #80]	; 0x50
 8005320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532e:	b29b      	uxth	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005334:	4413      	add	r3, r2
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
 8005338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	011a      	lsls	r2, r3, #4
 8005346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005348:	4413      	add	r3, r2
 800534a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005354:	b29a      	uxth	r2, r3
 8005356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005358:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800535a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	891b      	ldrh	r3, [r3, #8]
 8005366:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800536a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6959      	ldr	r1, [r3, #20]
 8005376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537a:	b29b      	uxth	r3, r3
 800537c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005380:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005384:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005388:	6800      	ldr	r0, [r0, #0]
 800538a:	f001 f982 	bl	8006692 <USB_WritePMA>
            ep->xfer_buff += len;
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539e:	441a      	add	r2, r3
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d90f      	bls.n	80053e8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80053c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6a1a      	ldr	r2, [r3, #32]
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d8:	1ad2      	subs	r2, r2, r3
 80053da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	621a      	str	r2, [r3, #32]
 80053e6:	e00e      	b.n	8005406 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80053e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80053f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	643b      	str	r3, [r7, #64]	; 0x40
 8005412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d177      	bne.n	8005512 <USB_EPStartXfer+0x85e>
 8005422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	63bb      	str	r3, [r7, #56]	; 0x38
 800542e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543c:	b29b      	uxth	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	4413      	add	r3, r2
 8005444:	63bb      	str	r3, [r7, #56]	; 0x38
 8005446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	011a      	lsls	r2, r3, #4
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	4413      	add	r3, r2
 8005458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005468:	b29a      	uxth	r2, r3
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005472:	2b3e      	cmp	r3, #62	; 0x3e
 8005474:	d921      	bls.n	80054ba <USB_EPStartXfer+0x806>
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <USB_EPStartXfer+0x7e2>
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	3b01      	subs	r3, #1
 8005492:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29a      	uxth	r2, r3
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	029b      	lsls	r3, r3, #10
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	4313      	orrs	r3, r2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	e050      	b.n	800555c <USB_EPStartXfer+0x8a8>
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <USB_EPStartXfer+0x824>
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	801a      	strh	r2, [r3, #0]
 80054d6:	e041      	b.n	800555c <USB_EPStartXfer+0x8a8>
 80054d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d004      	beq.n	80054f8 <USB_EPStartXfer+0x844>
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	3301      	adds	r3, #1
 80054f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005502:	b29b      	uxth	r3, r3
 8005504:	029b      	lsls	r3, r3, #10
 8005506:	b29b      	uxth	r3, r3
 8005508:	4313      	orrs	r3, r2
 800550a:	b29a      	uxth	r2, r3
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	801a      	strh	r2, [r3, #0]
 8005510:	e024      	b.n	800555c <USB_EPStartXfer+0x8a8>
 8005512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d11c      	bne.n	800555c <USB_EPStartXfer+0x8a8>
 8005522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005530:	b29b      	uxth	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005536:	4413      	add	r3, r2
 8005538:	643b      	str	r3, [r7, #64]	; 0x40
 800553a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	011a      	lsls	r2, r3, #4
 8005548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554a:	4413      	add	r3, r2
 800554c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005556:	b29a      	uxth	r2, r3
 8005558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800555c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	895b      	ldrh	r3, [r3, #10]
 8005568:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800556c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6959      	ldr	r1, [r3, #20]
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800557c:	b29b      	uxth	r3, r3
 800557e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005582:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005586:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	f001 f881 	bl	8006692 <USB_WritePMA>
 8005590:	e227      	b.n	80059e2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80055a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80055ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800560a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005618:	b29b      	uxth	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561e:	4413      	add	r3, r2
 8005620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	011a      	lsls	r2, r3, #4
 8005630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005632:	4413      	add	r3, r2
 8005634:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005638:	65bb      	str	r3, [r7, #88]	; 0x58
 800563a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563e:	b29a      	uxth	r2, r3
 8005640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005642:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	891b      	ldrh	r3, [r3, #8]
 8005650:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6959      	ldr	r1, [r3, #20]
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	b29b      	uxth	r3, r3
 8005666:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800566a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800566e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005672:	6800      	ldr	r0, [r0, #0]
 8005674:	f001 f80d 	bl	8006692 <USB_WritePMA>
 8005678:	e1b3      	b.n	80059e2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800567a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a1a      	ldr	r2, [r3, #32]
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80c6 	beq.w	800584c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	673b      	str	r3, [r7, #112]	; 0x70
 80056cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d177      	bne.n	80057cc <USB_EPStartXfer+0xb18>
 80056dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80056e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056fc:	4413      	add	r3, r2
 80056fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	011a      	lsls	r2, r3, #4
 800570e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005710:	4413      	add	r3, r2
 8005712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005716:	667b      	str	r3, [r7, #100]	; 0x64
 8005718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005722:	b29a      	uxth	r2, r3
 8005724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005726:	801a      	strh	r2, [r3, #0]
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572c:	2b3e      	cmp	r3, #62	; 0x3e
 800572e:	d921      	bls.n	8005774 <USB_EPStartXfer+0xac0>
 8005730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800573a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	2b00      	cmp	r3, #0
 8005744:	d104      	bne.n	8005750 <USB_EPStartXfer+0xa9c>
 8005746:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800574a:	3b01      	subs	r3, #1
 800574c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29a      	uxth	r2, r3
 8005756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800575a:	b29b      	uxth	r3, r3
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	b29b      	uxth	r3, r3
 8005760:	4313      	orrs	r3, r2
 8005762:	b29b      	uxth	r3, r3
 8005764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576c:	b29a      	uxth	r2, r3
 800576e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e050      	b.n	8005816 <USB_EPStartXfer+0xb62>
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <USB_EPStartXfer+0xade>
 800577c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29a      	uxth	r2, r3
 800578c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e041      	b.n	8005816 <USB_EPStartXfer+0xb62>
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <USB_EPStartXfer+0xafe>
 80057a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057ac:	3301      	adds	r3, #1
 80057ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	e024      	b.n	8005816 <USB_EPStartXfer+0xb62>
 80057cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d11c      	bne.n	8005816 <USB_EPStartXfer+0xb62>
 80057dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f0:	4413      	add	r3, r2
 80057f2:	673b      	str	r3, [r7, #112]	; 0x70
 80057f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005804:	4413      	add	r3, r2
 8005806:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800580a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800580c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005810:	b29a      	uxth	r2, r3
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	895b      	ldrh	r3, [r3, #10]
 8005822:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6959      	ldr	r1, [r3, #20]
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005836:	b29b      	uxth	r3, r3
 8005838:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800583c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005840:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005844:	6800      	ldr	r0, [r0, #0]
 8005846:	f000 ff24 	bl	8006692 <USB_WritePMA>
 800584a:	e0ca      	b.n	80059e2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d177      	bne.n	800594c <USB_EPStartXfer+0xc98>
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005876:	b29b      	uxth	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800587c:	4413      	add	r3, r2
 800587e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	011a      	lsls	r2, r3, #4
 800588e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005890:	4413      	add	r3, r2
 8005892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005896:	67bb      	str	r3, [r7, #120]	; 0x78
 8005898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ac:	2b3e      	cmp	r3, #62	; 0x3e
 80058ae:	d921      	bls.n	80058f4 <USB_EPStartXfer+0xc40>
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <USB_EPStartXfer+0xc1c>
 80058c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058ca:	3b01      	subs	r3, #1
 80058cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058da:	b29b      	uxth	r3, r3
 80058dc:	029b      	lsls	r3, r3, #10
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	e05c      	b.n	80059ae <USB_EPStartXfer+0xcfa>
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <USB_EPStartXfer+0xc5e>
 80058fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590a:	b29a      	uxth	r2, r3
 800590c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e04d      	b.n	80059ae <USB_EPStartXfer+0xcfa>
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d004      	beq.n	8005932 <USB_EPStartXfer+0xc7e>
 8005928:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800592c:	3301      	adds	r3, #1
 800592e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29a      	uxth	r2, r3
 8005938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800593c:	b29b      	uxth	r3, r3
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	b29b      	uxth	r3, r3
 8005942:	4313      	orrs	r3, r2
 8005944:	b29a      	uxth	r2, r3
 8005946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e030      	b.n	80059ae <USB_EPStartXfer+0xcfa>
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d128      	bne.n	80059ae <USB_EPStartXfer+0xcfa>
 800595c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800596a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005980:	4413      	add	r3, r2
 8005982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	011a      	lsls	r2, r3, #4
 8005994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005998:	4413      	add	r3, r2
 800599a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800599e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	891b      	ldrh	r3, [r3, #8]
 80059ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6959      	ldr	r1, [r3, #20]
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059dc:	6800      	ldr	r0, [r0, #0]
 80059de:	f000 fe58 	bl	8006692 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80059e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a08:	817b      	strh	r3, [r7, #10]
 8005a0a:	897b      	ldrh	r3, [r7, #10]
 8005a0c:	f083 0310 	eor.w	r3, r3, #16
 8005a10:	817b      	strh	r3, [r7, #10]
 8005a12:	897b      	ldrh	r3, [r7, #10]
 8005a14:	f083 0320 	eor.w	r3, r3, #32
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	441a      	add	r2, r3
 8005a34:	897b      	ldrh	r3, [r7, #10]
 8005a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	8013      	strh	r3, [r2, #0]
 8005a4a:	f000 bcde 	b.w	800640a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	7b1b      	ldrb	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 80bb 	bne.w	8005bd6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d917      	bls.n	8005aac <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	619a      	str	r2, [r3, #24]
 8005aaa:	e00e      	b.n	8005aca <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aee:	4413      	add	r3, r2
 8005af0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	011a      	lsls	r2, r3, #4
 8005b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b06:	4413      	add	r3, r2
 8005b08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b28:	2b3e      	cmp	r3, #62	; 0x3e
 8005b2a:	d924      	bls.n	8005b76 <USB_EPStartXfer+0xec2>
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <USB_EPStartXfer+0xe98>
 8005b42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b46:	3b01      	subs	r3, #1
 8005b48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	029b      	lsls	r3, r3, #10
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	f000 bc10 	b.w	8006396 <USB_EPStartXfer+0x16e2>
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10c      	bne.n	8005b98 <USB_EPStartXfer+0xee4>
 8005b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e3fe      	b.n	8006396 <USB_EPStartXfer+0x16e2>
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <USB_EPStartXfer+0xf04>
 8005bae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	029b      	lsls	r3, r3, #10
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	e3df      	b.n	8006396 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	78db      	ldrb	r3, [r3, #3]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	f040 8218 	bne.w	8006018 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f040 809d 	bne.w	8005d34 <USB_EPStartXfer+0x1080>
 8005bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c1e:	4413      	add	r3, r2
 8005c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	011a      	lsls	r2, r3, #4
 8005c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b3e      	cmp	r3, #62	; 0x3e
 8005c62:	d92b      	bls.n	8005cbc <USB_EPStartXfer+0x1008>
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <USB_EPStartXfer+0xfe0>
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	029b      	lsls	r3, r3, #10
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	e070      	b.n	8005d9e <USB_EPStartXfer+0x10ea>
 8005cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10c      	bne.n	8005ce6 <USB_EPStartXfer+0x1032>
 8005ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e05b      	b.n	8005d9e <USB_EPStartXfer+0x10ea>
 8005ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <USB_EPStartXfer+0x1062>
 8005d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d10:	3301      	adds	r3, #1
 8005d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	e034      	b.n	8005d9e <USB_EPStartXfer+0x10ea>
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d12c      	bne.n	8005d9e <USB_EPStartXfer+0x10ea>
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d68:	4413      	add	r3, r2
 8005d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	011a      	lsls	r2, r3, #4
 8005d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d80:	4413      	add	r3, r2
 8005d82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f040 809d 	bne.w	8005ef8 <USB_EPStartXfer+0x1244>
 8005dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005de2:	4413      	add	r3, r2
 8005de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	011a      	lsls	r2, r3, #4
 8005df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b3e      	cmp	r3, #62	; 0x3e
 8005e26:	d92b      	bls.n	8005e80 <USB_EPStartXfer+0x11cc>
 8005e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d104      	bne.n	8005e58 <USB_EPStartXfer+0x11a4>
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e52:	3b01      	subs	r3, #1
 8005e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e069      	b.n	8005f54 <USB_EPStartXfer+0x12a0>
 8005e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10c      	bne.n	8005eaa <USB_EPStartXfer+0x11f6>
 8005e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	e054      	b.n	8005f54 <USB_EPStartXfer+0x12a0>
 8005eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	085b      	lsrs	r3, r3, #1
 8005eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <USB_EPStartXfer+0x1226>
 8005ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	029b      	lsls	r3, r3, #10
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	4313      	orrs	r3, r2
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	e02d      	b.n	8005f54 <USB_EPStartXfer+0x12a0>
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d125      	bne.n	8005f54 <USB_EPStartXfer+0x12a0>
 8005f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f1e:	4413      	add	r3, r2
 8005f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f36:	4413      	add	r3, r2
 8005f38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f52:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8218 	beq.w	8006396 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <USB_EPStartXfer+0x12ea>
 8005f92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10d      	bne.n	8005fba <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 81f5 	bne.w	8006396 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 81ee 	bne.w	8006396 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006012:	b29b      	uxth	r3, r3
 8006014:	8013      	strh	r3, [r2, #0]
 8006016:	e1be      	b.n	8006396 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	78db      	ldrb	r3, [r3, #3]
 8006024:	2b01      	cmp	r3, #1
 8006026:	f040 81b4 	bne.w	8006392 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	429a      	cmp	r2, r3
 8006044:	d917      	bls.n	8006076 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	619a      	str	r2, [r3, #24]
 8006074:	e00e      	b.n	8006094 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2200      	movs	r2, #0
 8006092:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f040 8085 	bne.w	80061b0 <USB_EPStartXfer+0x14fc>
 80060a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060ca:	4413      	add	r3, r2
 80060cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	011a      	lsls	r2, r3, #4
 80060de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060e2:	4413      	add	r3, r2
 80060e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006104:	2b3e      	cmp	r3, #62	; 0x3e
 8006106:	d923      	bls.n	8006150 <USB_EPStartXfer+0x149c>
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	2b00      	cmp	r3, #0
 800611c:	d104      	bne.n	8006128 <USB_EPStartXfer+0x1474>
 800611e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006122:	3b01      	subs	r3, #1
 8006124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29a      	uxth	r2, r3
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006134:	b29b      	uxth	r3, r3
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	b29b      	uxth	r3, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	b29b      	uxth	r3, r3
 800613e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006146:	b29a      	uxth	r2, r3
 8006148:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	e060      	b.n	8006212 <USB_EPStartXfer+0x155e>
 8006150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10c      	bne.n	8006172 <USB_EPStartXfer+0x14be>
 8006158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006168:	b29a      	uxth	r2, r3
 800616a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	e04f      	b.n	8006212 <USB_EPStartXfer+0x155e>
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <USB_EPStartXfer+0x14de>
 8006188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618c:	3301      	adds	r3, #1
 800618e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29a      	uxth	r2, r3
 800619a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619e:	b29b      	uxth	r3, r3
 80061a0:	029b      	lsls	r3, r3, #10
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4313      	orrs	r3, r2
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	e030      	b.n	8006212 <USB_EPStartXfer+0x155e>
 80061b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d128      	bne.n	8006212 <USB_EPStartXfer+0x155e>
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061dc:	b29b      	uxth	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061e4:	4413      	add	r3, r2
 80061e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	011a      	lsls	r2, r3, #4
 80061f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061fc:	4413      	add	r3, r2
 80061fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006202:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620a:	b29a      	uxth	r2, r3
 800620c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f040 8085 	bne.w	800633c <USB_EPStartXfer+0x1688>
 8006232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006256:	4413      	add	r3, r2
 8006258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800625c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	011a      	lsls	r2, r3, #4
 800626a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800626e:	4413      	add	r3, r2
 8006270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006278:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006284:	b29a      	uxth	r2, r3
 8006286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006290:	2b3e      	cmp	r3, #62	; 0x3e
 8006292:	d923      	bls.n	80062dc <USB_EPStartXfer+0x1628>
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800629e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <USB_EPStartXfer+0x1600>
 80062aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ae:	3b01      	subs	r3, #1
 80062b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	029b      	lsls	r3, r3, #10
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	4313      	orrs	r3, r2
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	e05c      	b.n	8006396 <USB_EPStartXfer+0x16e2>
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10c      	bne.n	80062fe <USB_EPStartXfer+0x164a>
 80062e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	e04b      	b.n	8006396 <USB_EPStartXfer+0x16e2>
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <USB_EPStartXfer+0x166a>
 8006314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006318:	3301      	adds	r3, #1
 800631a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800631e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29a      	uxth	r2, r3
 8006326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800632a:	b29b      	uxth	r3, r3
 800632c:	029b      	lsls	r3, r3, #10
 800632e:	b29b      	uxth	r3, r3
 8006330:	4313      	orrs	r3, r2
 8006332:	b29a      	uxth	r2, r3
 8006334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	e02c      	b.n	8006396 <USB_EPStartXfer+0x16e2>
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d124      	bne.n	8006396 <USB_EPStartXfer+0x16e2>
 800634c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006362:	4413      	add	r3, r2
 8006364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	011a      	lsls	r2, r3, #4
 8006376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800637a:	4413      	add	r3, r2
 800637c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006380:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006388:	b29a      	uxth	r2, r3
 800638a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	e001      	b.n	8006396 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e03a      	b.n	800640c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80063c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80063cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80063d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643e:	81bb      	strh	r3, [r7, #12]
 8006440:	89bb      	ldrh	r3, [r7, #12]
 8006442:	f083 0310 	eor.w	r3, r3, #16
 8006446:	81bb      	strh	r3, [r7, #12]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	441a      	add	r2, r3
 8006452:	89bb      	ldrh	r3, [r7, #12]
 8006454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006464:	b29b      	uxth	r3, r3
 8006466:	8013      	strh	r3, [r2, #0]
 8006468:	e01f      	b.n	80064aa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	81fb      	strh	r3, [r7, #14]
 8006482:	89fb      	ldrh	r3, [r7, #14]
 8006484:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006488:	81fb      	strh	r3, [r7, #14]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	441a      	add	r2, r3
 8006494:	89fb      	ldrh	r3, [r7, #14]
 8006496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr

080064b6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	7b1b      	ldrb	r3, [r3, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 809d 	bne.w	8006604 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04c      	beq.n	800656c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	823b      	strh	r3, [r7, #16]
 80064e0:	8a3b      	ldrh	r3, [r7, #16]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01b      	beq.n	8006522 <USB_EPClearStall+0x6c>
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006500:	81fb      	strh	r3, [r7, #14]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	89fb      	ldrh	r3, [r7, #14]
 800650e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800651e:	b29b      	uxth	r3, r3
 8006520:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	78db      	ldrb	r3, [r3, #3]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d06c      	beq.n	8006604 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006540:	81bb      	strh	r3, [r7, #12]
 8006542:	89bb      	ldrh	r3, [r7, #12]
 8006544:	f083 0320 	eor.w	r3, r3, #32
 8006548:	81bb      	strh	r3, [r7, #12]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	441a      	add	r2, r3
 8006554:	89bb      	ldrh	r3, [r7, #12]
 8006556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]
 800656a:	e04b      	b.n	8006604 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	82fb      	strh	r3, [r7, #22]
 800657a:	8afb      	ldrh	r3, [r7, #22]
 800657c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01b      	beq.n	80065bc <USB_EPClearStall+0x106>
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	82bb      	strh	r3, [r7, #20]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	441a      	add	r2, r3
 80065a6:	8abb      	ldrh	r3, [r7, #20]
 80065a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d2:	827b      	strh	r3, [r7, #18]
 80065d4:	8a7b      	ldrh	r3, [r7, #18]
 80065d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065da:	827b      	strh	r3, [r7, #18]
 80065dc:	8a7b      	ldrh	r3, [r7, #18]
 80065de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065e2:	827b      	strh	r3, [r7, #18]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	8a7b      	ldrh	r3, [r7, #18]
 80065f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006600:	b29b      	uxth	r3, r3
 8006602:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr

0800664a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr

0800665e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800666c:	b29b      	uxth	r3, r3
 800666e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006670:	68fb      	ldr	r3, [r7, #12]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006692:	b480      	push	{r7}
 8006694:	b08b      	sub	sp, #44	; 0x2c
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	4611      	mov	r1, r2
 800669e:	461a      	mov	r2, r3
 80066a0:	460b      	mov	r3, r1
 80066a2:	80fb      	strh	r3, [r7, #6]
 80066a4:	4613      	mov	r3, r2
 80066a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066a8:	88bb      	ldrh	r3, [r7, #4]
 80066aa:	3301      	adds	r3, #1
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	005a      	lsls	r2, r3, #1
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ca:	e01e      	b.n	800670a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	3301      	adds	r3, #1
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	b21a      	sxth	r2, r3
 80066dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	b21b      	sxth	r3, r3
 80066e4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	8a7a      	ldrh	r2, [r7, #18]
 80066ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	3302      	adds	r3, #2
 80066f0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	3302      	adds	r3, #2
 80066f6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3301      	adds	r3, #1
 80066fc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	3301      	adds	r3, #1
 8006702:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	3b01      	subs	r3, #1
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1dd      	bne.n	80066cc <USB_WritePMA+0x3a>
  }
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	372c      	adds	r7, #44	; 0x2c
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800671c:	b480      	push	{r7}
 800671e:	b08b      	sub	sp, #44	; 0x2c
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4611      	mov	r1, r2
 8006728:	461a      	mov	r2, r3
 800672a:	460b      	mov	r3, r1
 800672c:	80fb      	strh	r3, [r7, #6]
 800672e:	4613      	mov	r3, r2
 8006730:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006732:	88bb      	ldrh	r3, [r7, #4]
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	005a      	lsls	r2, r3, #1
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
 8006754:	e01b      	b.n	800678e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	3302      	adds	r3, #2
 8006762:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	3301      	adds	r3, #1
 8006770:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	0a1b      	lsrs	r3, r3, #8
 8006776:	b2da      	uxtb	r2, r3
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	3301      	adds	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	3302      	adds	r3, #2
 8006786:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	3b01      	subs	r3, #1
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e0      	bne.n	8006756 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006794:	88bb      	ldrh	r3, [r7, #4]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	701a      	strb	r2, [r3, #0]
  }
}
 80067b0:	bf00      	nop
 80067b2:	372c      	adds	r7, #44	; 0x2c
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	7c1b      	ldrb	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d115      	bne.n	80067fe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d6:	2202      	movs	r2, #2
 80067d8:	2181      	movs	r1, #129	; 0x81
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fe31 	bl	8008442 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ea:	2202      	movs	r2, #2
 80067ec:	2101      	movs	r1, #1
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fe27 	bl	8008442 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80067fc:	e012      	b.n	8006824 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067fe:	2340      	movs	r3, #64	; 0x40
 8006800:	2202      	movs	r2, #2
 8006802:	2181      	movs	r1, #129	; 0x81
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 fe1c 	bl	8008442 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	2202      	movs	r2, #2
 8006814:	2101      	movs	r1, #1
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fe13 	bl	8008442 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006824:	2308      	movs	r3, #8
 8006826:	2203      	movs	r2, #3
 8006828:	2182      	movs	r1, #130	; 0x82
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fe09 	bl	8008442 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006836:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800683a:	f001 ff29 	bl	8008690 <USBD_static_malloc>
 800683e:	4602      	mov	r2, r0
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	e026      	b.n	80068a4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7c1b      	ldrb	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fec8 	bl	8008622 <USBD_LL_PrepareReceive>
 8006892:	e007      	b.n	80068a4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800689a:	2340      	movs	r3, #64	; 0x40
 800689c:	2101      	movs	r1, #1
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 febf 	bl	8008622 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068be:	2181      	movs	r1, #129	; 0x81
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fde4 	bl	800848e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068cc:	2101      	movs	r1, #1
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fddd 	bl	800848e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068dc:	2182      	movs	r1, #130	; 0x82
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fdd5 	bl	800848e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fecf 	bl	80086a8 <USBD_static_free>
    pdev->pClassData = NULL;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006942:	2b00      	cmp	r3, #0
 8006944:	d039      	beq.n	80069ba <USBD_CDC_Setup+0x9e>
 8006946:	2b20      	cmp	r3, #32
 8006948:	d17f      	bne.n	8006a4a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d029      	beq.n	80069a6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	b25b      	sxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	da11      	bge.n	8006980 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006968:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	88d2      	ldrh	r2, [r2, #6]
 800696e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006970:	6939      	ldr	r1, [r7, #16]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	88db      	ldrh	r3, [r3, #6]
 8006976:	461a      	mov	r2, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 f9da 	bl	8007d32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800697e:	e06b      	b.n	8006a58 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	785a      	ldrb	r2, [r3, #1]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	b2da      	uxtb	r2, r3
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006996:	6939      	ldr	r1, [r7, #16]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	88db      	ldrh	r3, [r3, #6]
 800699c:	461a      	mov	r2, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 f9f5 	bl	8007d8e <USBD_CtlPrepareRx>
      break;
 80069a4:	e058      	b.n	8006a58 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	7850      	ldrb	r0, [r2, #1]
 80069b2:	2200      	movs	r2, #0
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	4798      	blx	r3
      break;
 80069b8:	e04e      	b.n	8006a58 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b0b      	cmp	r3, #11
 80069c0:	d02e      	beq.n	8006a20 <USBD_CDC_Setup+0x104>
 80069c2:	2b0b      	cmp	r3, #11
 80069c4:	dc38      	bgt.n	8006a38 <USBD_CDC_Setup+0x11c>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <USBD_CDC_Setup+0xb4>
 80069ca:	2b0a      	cmp	r3, #10
 80069cc:	d014      	beq.n	80069f8 <USBD_CDC_Setup+0xdc>
 80069ce:	e033      	b.n	8006a38 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d107      	bne.n	80069ea <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80069da:	f107 030c 	add.w	r3, r7, #12
 80069de:	2202      	movs	r2, #2
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 f9a5 	bl	8007d32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069e8:	e02e      	b.n	8006a48 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 f936 	bl	8007c5e <USBD_CtlError>
            ret = USBD_FAIL;
 80069f2:	2302      	movs	r3, #2
 80069f4:	75fb      	strb	r3, [r7, #23]
          break;
 80069f6:	e027      	b.n	8006a48 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d107      	bne.n	8006a12 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a02:	f107 030f 	add.w	r3, r7, #15
 8006a06:	2201      	movs	r2, #1
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 f991 	bl	8007d32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a10:	e01a      	b.n	8006a48 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 f922 	bl	8007c5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a1e:	e013      	b.n	8006a48 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d00d      	beq.n	8006a46 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f916 	bl	8007c5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a32:	2302      	movs	r3, #2
 8006a34:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a36:	e006      	b.n	8006a46 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 f90f 	bl	8007c5e <USBD_CtlError>
          ret = USBD_FAIL;
 8006a40:	2302      	movs	r3, #2
 8006a42:	75fb      	strb	r3, [r7, #23]
          break;
 8006a44:	e000      	b.n	8006a48 <USBD_CDC_Setup+0x12c>
          break;
 8006a46:	bf00      	nop
      }
      break;
 8006a48:	e006      	b.n	8006a58 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f906 	bl	8007c5e <USBD_CtlError>
      ret = USBD_FAIL;
 8006a52:	2302      	movs	r3, #2
 8006a54:	75fb      	strb	r3, [r7, #23]
      break;
 8006a56:	bf00      	nop
  }

  return ret;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a74:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a7c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d03a      	beq.n	8006afe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	331c      	adds	r3, #28
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d029      	beq.n	8006af2 <USBD_CDC_DataIn+0x90>
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	331c      	adds	r3, #28
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	78f9      	ldrb	r1, [r7, #3]
 8006ab2:	68b8      	ldr	r0, [r7, #8]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4403      	add	r3, r0
 8006abe:	3320      	adds	r3, #32
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ac6:	fb01 f303 	mul.w	r3, r1, r3
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d110      	bne.n	8006af2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	331c      	adds	r3, #28
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ae4:	78f9      	ldrb	r1, [r7, #3]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2200      	movs	r2, #0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fd76 	bl	80085dc <USBD_LL_Transmit>
 8006af0:	e003      	b.n	8006afa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e000      	b.n	8006b00 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006afe:	2302      	movs	r3, #2
  }
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 fda1 	bl	8008668 <USBD_LL_GetRxDataSize>
 8006b26:	4602      	mov	r2, r0
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4798      	blx	r3

    return USBD_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e000      	b.n	8006b56 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d015      	beq.n	8006ba4 <USBD_CDC_EP0_RxReady+0x46>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b7e:	2bff      	cmp	r3, #255	; 0xff
 8006b80:	d010      	beq.n	8006ba4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b98:	b292      	uxth	r2, r2
 8006b9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	22ff      	movs	r2, #255	; 0xff
 8006ba0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2243      	movs	r2, #67	; 0x43
 8006bbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000094 	.word	0x20000094

08006bd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2243      	movs	r2, #67	; 0x43
 8006bdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006bde:	4b03      	ldr	r3, [pc, #12]	; (8006bec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000050 	.word	0x20000050

08006bf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2243      	movs	r2, #67	; 0x43
 8006bfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	200000d8 	.word	0x200000d8

08006c10 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	220a      	movs	r2, #10
 8006c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c1e:	4b03      	ldr	r3, [pc, #12]	; (8006c2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	2000000c 	.word	0x2000000c

08006c30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr

08006c8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d017      	beq.n	8006cfe <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7c1b      	ldrb	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fc9d 	bl	8008622 <USBD_LL_PrepareReceive>
 8006ce8:	e007      	b.n	8006cfa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cf0:	2340      	movs	r3, #64	; 0x40
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 fc94 	bl	8008622 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e000      	b.n	8006d00 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006cfe:	2302      	movs	r3, #2
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e01a      	b.n	8006d56 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	79fa      	ldrb	r2, [r7, #7]
 8006d4c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f001 fb02 	bl	8008358 <USBD_LL_Init>

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d006      	beq.n	8006d80 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
 8006d7e:	e001      	b.n	8006d84 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d80:	2302      	movs	r3, #2
 8006d82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fb37 	bl	800840c <USBD_LL_Start>

  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00c      	beq.n	8006df0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	4611      	mov	r1, r2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	4611      	mov	r1, r2
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3

  return USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fed7 	bl	8007be6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d016      	beq.n	8006e8a <USBD_LL_SetupStage+0x6a>
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d81c      	bhi.n	8006e9a <USBD_LL_SetupStage+0x7a>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <USBD_LL_SetupStage+0x4a>
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d008      	beq.n	8006e7a <USBD_LL_SetupStage+0x5a>
 8006e68:	e017      	b.n	8006e9a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f9ca 	bl	800720c <USBD_StdDevReq>
      break;
 8006e78:	e01a      	b.n	8006eb0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa2c 	bl	80072e0 <USBD_StdItfReq>
      break;
 8006e88:	e012      	b.n	8006eb0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fa6c 	bl	8007370 <USBD_StdEPReq>
      break;
 8006e98:	e00a      	b.n	8006eb0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ea0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fb0f 	bl	80084cc <USBD_LL_StallEP>
      break;
 8006eae:	bf00      	nop
  }

  return USBD_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	607a      	str	r2, [r7, #4]
 8006ec6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ec8:	7afb      	ldrb	r3, [r7, #11]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d14b      	bne.n	8006f66 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ed4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d134      	bne.n	8006f4a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d919      	bls.n	8006f20 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	1ad2      	subs	r2, r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d203      	bcs.n	8006f0e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	e002      	b.n	8006f14 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 ff56 	bl	8007dca <USBD_CtlContinueRx>
 8006f1e:	e038      	b.n	8006f92 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d105      	bne.n	8006f42 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 ff53 	bl	8007dee <USBD_CtlSendStatus>
 8006f48:	e023      	b.n	8006f92 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f50:	2b05      	cmp	r3, #5
 8006f52:	d11e      	bne.n	8006f92 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f001 fab4 	bl	80084cc <USBD_LL_StallEP>
 8006f64:	e015      	b.n	8006f92 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d108      	bne.n	8006f8e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	7afa      	ldrb	r2, [r7, #11]
 8006f86:	4611      	mov	r1, r2
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	4798      	blx	r3
 8006f8c:	e001      	b.n	8006f92 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e000      	b.n	8006f94 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d17f      	bne.n	80070b0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3314      	adds	r3, #20
 8006fb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d15c      	bne.n	800707a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d915      	bls.n	8006ff8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	1ad2      	subs	r2, r2, r3
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fec0 	bl	8007d6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fea:	2300      	movs	r3, #0
 8006fec:	2200      	movs	r2, #0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 fb16 	bl	8008622 <USBD_LL_PrepareReceive>
 8006ff6:	e04e      	b.n	8007096 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	6912      	ldr	r2, [r2, #16]
 8007000:	fbb3 f1f2 	udiv	r1, r3, r2
 8007004:	fb01 f202 	mul.w	r2, r1, r2
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d11c      	bne.n	8007048 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007016:	429a      	cmp	r2, r3
 8007018:	d316      	bcc.n	8007048 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007024:	429a      	cmp	r2, r3
 8007026:	d20f      	bcs.n	8007048 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007028:	2200      	movs	r2, #0
 800702a:	2100      	movs	r1, #0
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fe9c 	bl	8007d6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800703a:	2300      	movs	r3, #0
 800703c:	2200      	movs	r2, #0
 800703e:	2100      	movs	r1, #0
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f001 faee 	bl	8008622 <USBD_LL_PrepareReceive>
 8007046:	e026      	b.n	8007096 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800705a:	2b03      	cmp	r3, #3
 800705c:	d105      	bne.n	800706a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800706a:	2180      	movs	r1, #128	; 0x80
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f001 fa2d 	bl	80084cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 fece 	bl	8007e14 <USBD_CtlReceiveStatus>
 8007078:	e00d      	b.n	8007096 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007080:	2b04      	cmp	r3, #4
 8007082:	d004      	beq.n	800708e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800708e:	2180      	movs	r1, #128	; 0x80
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f001 fa1b 	bl	80084cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800709c:	2b01      	cmp	r3, #1
 800709e:	d11d      	bne.n	80070dc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff fe81 	bl	8006da8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070ae:	e015      	b.n	80070dc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00d      	beq.n	80070d8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d108      	bne.n	80070d8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	7afa      	ldrb	r2, [r7, #11]
 80070d0:	4611      	mov	r1, r2
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	4798      	blx	r3
 80070d6:	e001      	b.n	80070dc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070d8:	2302      	movs	r3, #2
 80070da:	e000      	b.n	80070de <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070ee:	2340      	movs	r3, #64	; 0x40
 80070f0:	2200      	movs	r2, #0
 80070f2:	2100      	movs	r1, #0
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 f9a4 	bl	8008442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2240      	movs	r2, #64	; 0x40
 8007106:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800710a:	2340      	movs	r3, #64	; 0x40
 800710c:	2200      	movs	r2, #0
 800710e:	2180      	movs	r1, #128	; 0x80
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f996 	bl	8008442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2240      	movs	r2, #64	; 0x40
 8007120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6852      	ldr	r2, [r2, #4]
 8007156:	b2d2      	uxtb	r2, r2
 8007158:	4611      	mov	r1, r2
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
  }

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr

08007186 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2204      	movs	r2, #4
 800719e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr

080071ae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d105      	bne.n	80071cc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d10b      	bne.n	8007202 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d005      	beq.n	8007232 <USBD_StdDevReq+0x26>
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d84f      	bhi.n	80072ca <USBD_StdDevReq+0xbe>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <USBD_StdDevReq+0x36>
 800722e:	2b20      	cmp	r3, #32
 8007230:	d14b      	bne.n	80072ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	4798      	blx	r3
      break;
 8007240:	e048      	b.n	80072d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	785b      	ldrb	r3, [r3, #1]
 8007246:	2b09      	cmp	r3, #9
 8007248:	d839      	bhi.n	80072be <USBD_StdDevReq+0xb2>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <USBD_StdDevReq+0x44>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	080072a1 	.word	0x080072a1
 8007254:	080072b5 	.word	0x080072b5
 8007258:	080072bf 	.word	0x080072bf
 800725c:	080072ab 	.word	0x080072ab
 8007260:	080072bf 	.word	0x080072bf
 8007264:	08007283 	.word	0x08007283
 8007268:	08007279 	.word	0x08007279
 800726c:	080072bf 	.word	0x080072bf
 8007270:	08007297 	.word	0x08007297
 8007274:	0800728d 	.word	0x0800728d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9dc 	bl	8007638 <USBD_GetDescriptor>
          break;
 8007280:	e022      	b.n	80072c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fb3f 	bl	8007908 <USBD_SetAddress>
          break;
 800728a:	e01d      	b.n	80072c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fb7e 	bl	8007990 <USBD_SetConfig>
          break;
 8007294:	e018      	b.n	80072c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fc07 	bl	8007aac <USBD_GetConfig>
          break;
 800729e:	e013      	b.n	80072c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fc37 	bl	8007b16 <USBD_GetStatus>
          break;
 80072a8:	e00e      	b.n	80072c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fc65 	bl	8007b7c <USBD_SetFeature>
          break;
 80072b2:	e009      	b.n	80072c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fc74 	bl	8007ba4 <USBD_ClrFeature>
          break;
 80072bc:	e004      	b.n	80072c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fccc 	bl	8007c5e <USBD_CtlError>
          break;
 80072c6:	bf00      	nop
      }
      break;
 80072c8:	e004      	b.n	80072d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fcc6 	bl	8007c5e <USBD_CtlError>
      break;
 80072d2:	bf00      	nop
  }

  return ret;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop

080072e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072f6:	2b40      	cmp	r3, #64	; 0x40
 80072f8:	d005      	beq.n	8007306 <USBD_StdItfReq+0x26>
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d82e      	bhi.n	800735c <USBD_StdItfReq+0x7c>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <USBD_StdItfReq+0x26>
 8007302:	2b20      	cmp	r3, #32
 8007304:	d12a      	bne.n	800735c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730c:	3b01      	subs	r3, #1
 800730e:	2b02      	cmp	r3, #2
 8007310:	d81d      	bhi.n	800734e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	889b      	ldrh	r3, [r3, #4]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b01      	cmp	r3, #1
 800731a:	d813      	bhi.n	8007344 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	88db      	ldrh	r3, [r3, #6]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d110      	bne.n	8007358 <USBD_StdItfReq+0x78>
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10d      	bne.n	8007358 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fd56 	bl	8007dee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007342:	e009      	b.n	8007358 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fc89 	bl	8007c5e <USBD_CtlError>
          break;
 800734c:	e004      	b.n	8007358 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fc84 	bl	8007c5e <USBD_CtlError>
          break;
 8007356:	e000      	b.n	800735a <USBD_StdItfReq+0x7a>
          break;
 8007358:	bf00      	nop
      }
      break;
 800735a:	e004      	b.n	8007366 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fc7d 	bl	8007c5e <USBD_CtlError>
      break;
 8007364:	bf00      	nop
  }

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	889b      	ldrh	r3, [r3, #4]
 8007382:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d007      	beq.n	80073a0 <USBD_StdEPReq+0x30>
 8007390:	2b40      	cmp	r3, #64	; 0x40
 8007392:	f200 8146 	bhi.w	8007622 <USBD_StdEPReq+0x2b2>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <USBD_StdEPReq+0x40>
 800739a:	2b20      	cmp	r3, #32
 800739c:	f040 8141 	bne.w	8007622 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
      break;
 80073ae:	e13d      	b.n	800762c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d10a      	bne.n	80073d2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	e12d      	b.n	800762e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d007      	beq.n	80073ea <USBD_StdEPReq+0x7a>
 80073da:	2b03      	cmp	r3, #3
 80073dc:	f300 811b 	bgt.w	8007616 <USBD_StdEPReq+0x2a6>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d072      	beq.n	80074ca <USBD_StdEPReq+0x15a>
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d03a      	beq.n	800745e <USBD_StdEPReq+0xee>
 80073e8:	e115      	b.n	8007616 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d002      	beq.n	80073fa <USBD_StdEPReq+0x8a>
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d015      	beq.n	8007424 <USBD_StdEPReq+0xb4>
 80073f8:	e02b      	b.n	8007452 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00c      	beq.n	800741a <USBD_StdEPReq+0xaa>
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	2b80      	cmp	r3, #128	; 0x80
 8007404:	d009      	beq.n	800741a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 f85e 	bl	80084cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007410:	2180      	movs	r1, #128	; 0x80
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f85a 	bl	80084cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007418:	e020      	b.n	800745c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fc1e 	bl	8007c5e <USBD_CtlError>
              break;
 8007422:	e01b      	b.n	800745c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	885b      	ldrh	r3, [r3, #2]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10e      	bne.n	800744a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <USBD_StdEPReq+0xda>
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d008      	beq.n	800744a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	88db      	ldrh	r3, [r3, #6]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f841 	bl	80084cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fccf 	bl	8007dee <USBD_CtlSendStatus>

              break;
 8007450:	e004      	b.n	800745c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc02 	bl	8007c5e <USBD_CtlError>
              break;
 800745a:	bf00      	nop
          }
          break;
 800745c:	e0e0      	b.n	8007620 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007464:	2b02      	cmp	r3, #2
 8007466:	d002      	beq.n	800746e <USBD_StdEPReq+0xfe>
 8007468:	2b03      	cmp	r3, #3
 800746a:	d015      	beq.n	8007498 <USBD_StdEPReq+0x128>
 800746c:	e026      	b.n	80074bc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00c      	beq.n	800748e <USBD_StdEPReq+0x11e>
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b80      	cmp	r3, #128	; 0x80
 8007478:	d009      	beq.n	800748e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 f824 	bl	80084cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 f820 	bl	80084cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800748c:	e01c      	b.n	80074c8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fbe4 	bl	8007c5e <USBD_CtlError>
              break;
 8007496:	e017      	b.n	80074c8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	885b      	ldrh	r3, [r3, #2]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d112      	bne.n	80074c6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 f82b 	bl	800850a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fc9a 	bl	8007dee <USBD_CtlSendStatus>
              }
              break;
 80074ba:	e004      	b.n	80074c6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fbcd 	bl	8007c5e <USBD_CtlError>
              break;
 80074c4:	e000      	b.n	80074c8 <USBD_StdEPReq+0x158>
              break;
 80074c6:	bf00      	nop
          }
          break;
 80074c8:	e0aa      	b.n	8007620 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d002      	beq.n	80074da <USBD_StdEPReq+0x16a>
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d032      	beq.n	800753e <USBD_StdEPReq+0x1ce>
 80074d8:	e097      	b.n	800760a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <USBD_StdEPReq+0x180>
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d004      	beq.n	80074f0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fbb8 	bl	8007c5e <USBD_CtlError>
                break;
 80074ee:	e091      	b.n	8007614 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	da0b      	bge.n	8007510 <USBD_StdEPReq+0x1a0>
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	3310      	adds	r3, #16
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	4413      	add	r3, r2
 800750c:	3304      	adds	r3, #4
 800750e:	e00b      	b.n	8007528 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2202      	movs	r2, #2
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fbfb 	bl	8007d32 <USBD_CtlSendData>
              break;
 800753c:	e06a      	b.n	8007614 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800753e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007542:	2b00      	cmp	r3, #0
 8007544:	da11      	bge.n	800756a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	f003 020f 	and.w	r2, r3, #15
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	3318      	adds	r3, #24
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d117      	bne.n	8007590 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fb7b 	bl	8007c5e <USBD_CtlError>
                  break;
 8007568:	e054      	b.n	8007614 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	f003 020f 	and.w	r2, r3, #15
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fb68 	bl	8007c5e <USBD_CtlError>
                  break;
 800758e:	e041      	b.n	8007614 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	da0b      	bge.n	80075b0 <USBD_StdEPReq+0x240>
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	3310      	adds	r3, #16
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4413      	add	r3, r2
 80075ac:	3304      	adds	r3, #4
 80075ae:	e00b      	b.n	80075c8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	3304      	adds	r3, #4
 80075c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <USBD_StdEPReq+0x266>
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	2b80      	cmp	r3, #128	; 0x80
 80075d4:	d103      	bne.n	80075de <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	e00e      	b.n	80075fc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 ffb0 	bl	8008548 <USBD_LL_IsStallEP>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	e002      	b.n	80075fc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2202      	movs	r2, #2
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb95 	bl	8007d32 <USBD_CtlSendData>
              break;
 8007608:	e004      	b.n	8007614 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb26 	bl	8007c5e <USBD_CtlError>
              break;
 8007612:	bf00      	nop
          }
          break;
 8007614:	e004      	b.n	8007620 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fb20 	bl	8007c5e <USBD_CtlError>
          break;
 800761e:	bf00      	nop
      }
      break;
 8007620:	e004      	b.n	800762c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb1a 	bl	8007c5e <USBD_CtlError>
      break;
 800762a:	bf00      	nop
  }

  return ret;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	885b      	ldrh	r3, [r3, #2]
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	2b06      	cmp	r3, #6
 800765a:	f200 8128 	bhi.w	80078ae <USBD_GetDescriptor+0x276>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <USBD_GetDescriptor+0x2c>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	08007681 	.word	0x08007681
 8007668:	08007699 	.word	0x08007699
 800766c:	080076d9 	.word	0x080076d9
 8007670:	080078af 	.word	0x080078af
 8007674:	080078af 	.word	0x080078af
 8007678:	0800784f 	.word	0x0800784f
 800767c:	0800787b 	.word	0x0800787b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	7c12      	ldrb	r2, [r2, #16]
 800768c:	f107 0108 	add.w	r1, r7, #8
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	60f8      	str	r0, [r7, #12]
      break;
 8007696:	e112      	b.n	80078be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	7c1b      	ldrb	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10d      	bne.n	80076bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	f107 0208 	add.w	r2, r7, #8
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	2202      	movs	r2, #2
 80076b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076ba:	e100      	b.n	80078be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	f107 0208 	add.w	r2, r7, #8
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
 80076cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	2202      	movs	r2, #2
 80076d4:	701a      	strb	r2, [r3, #0]
      break;
 80076d6:	e0f2      	b.n	80078be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	885b      	ldrh	r3, [r3, #2]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b05      	cmp	r3, #5
 80076e0:	f200 80ac 	bhi.w	800783c <USBD_GetDescriptor+0x204>
 80076e4:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <USBD_GetDescriptor+0xb4>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	08007705 	.word	0x08007705
 80076f0:	08007739 	.word	0x08007739
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	080077a1 	.word	0x080077a1
 80076fc:	080077d5 	.word	0x080077d5
 8007700:	08007809 	.word	0x08007809
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	7c12      	ldrb	r2, [r2, #16]
 800771c:	f107 0108 	add.w	r1, r7, #8
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007726:	e091      	b.n	800784c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa97 	bl	8007c5e <USBD_CtlError>
            err++;
 8007730:	7afb      	ldrb	r3, [r7, #11]
 8007732:	3301      	adds	r3, #1
 8007734:	72fb      	strb	r3, [r7, #11]
          break;
 8007736:	e089      	b.n	800784c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	7c12      	ldrb	r2, [r2, #16]
 8007750:	f107 0108 	add.w	r1, r7, #8
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775a:	e077      	b.n	800784c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa7d 	bl	8007c5e <USBD_CtlError>
            err++;
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	3301      	adds	r3, #1
 8007768:	72fb      	strb	r3, [r7, #11]
          break;
 800776a:	e06f      	b.n	800784c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7c12      	ldrb	r2, [r2, #16]
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778e:	e05d      	b.n	800784c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa63 	bl	8007c5e <USBD_CtlError>
            err++;
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	3301      	adds	r3, #1
 800779c:	72fb      	strb	r3, [r7, #11]
          break;
 800779e:	e055      	b.n	800784c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7c12      	ldrb	r2, [r2, #16]
 80077b8:	f107 0108 	add.w	r1, r7, #8
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c2:	e043      	b.n	800784c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa49 	bl	8007c5e <USBD_CtlError>
            err++;
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	3301      	adds	r3, #1
 80077d0:	72fb      	strb	r3, [r7, #11]
          break;
 80077d2:	e03b      	b.n	800784c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	7c12      	ldrb	r2, [r2, #16]
 80077ec:	f107 0108 	add.w	r1, r7, #8
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f6:	e029      	b.n	800784c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa2f 	bl	8007c5e <USBD_CtlError>
            err++;
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	3301      	adds	r3, #1
 8007804:	72fb      	strb	r3, [r7, #11]
          break;
 8007806:	e021      	b.n	800784c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7c12      	ldrb	r2, [r2, #16]
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782a:	e00f      	b.n	800784c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa15 	bl	8007c5e <USBD_CtlError>
            err++;
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	3301      	adds	r3, #1
 8007838:	72fb      	strb	r3, [r7, #11]
          break;
 800783a:	e007      	b.n	800784c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa0d 	bl	8007c5e <USBD_CtlError>
          err++;
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	3301      	adds	r3, #1
 8007848:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800784a:	e038      	b.n	80078be <USBD_GetDescriptor+0x286>
 800784c:	e037      	b.n	80078be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7c1b      	ldrb	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d109      	bne.n	800786a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785e:	f107 0208 	add.w	r2, r7, #8
 8007862:	4610      	mov	r0, r2
 8007864:	4798      	blx	r3
 8007866:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007868:	e029      	b.n	80078be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f9f6 	bl	8007c5e <USBD_CtlError>
        err++;
 8007872:	7afb      	ldrb	r3, [r7, #11]
 8007874:	3301      	adds	r3, #1
 8007876:	72fb      	strb	r3, [r7, #11]
      break;
 8007878:	e021      	b.n	80078be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7c1b      	ldrb	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10d      	bne.n	800789e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	f107 0208 	add.w	r2, r7, #8
 800788e:	4610      	mov	r0, r2
 8007890:	4798      	blx	r3
 8007892:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3301      	adds	r3, #1
 8007898:	2207      	movs	r2, #7
 800789a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800789c:	e00f      	b.n	80078be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9dc 	bl	8007c5e <USBD_CtlError>
        err++;
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	3301      	adds	r3, #1
 80078aa:	72fb      	strb	r3, [r7, #11]
      break;
 80078ac:	e007      	b.n	80078be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f9d4 	bl	8007c5e <USBD_CtlError>
      err++;
 80078b6:	7afb      	ldrb	r3, [r7, #11]
 80078b8:	3301      	adds	r3, #1
 80078ba:	72fb      	strb	r3, [r7, #11]
      break;
 80078bc:	bf00      	nop
  }

  if (err != 0U)
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d11c      	bne.n	80078fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80078c4:	893b      	ldrh	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d011      	beq.n	80078ee <USBD_GetDescriptor+0x2b6>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	88db      	ldrh	r3, [r3, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00d      	beq.n	80078ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	88da      	ldrh	r2, [r3, #6]
 80078d6:	893b      	ldrh	r3, [r7, #8]
 80078d8:	4293      	cmp	r3, r2
 80078da:	bf28      	it	cs
 80078dc:	4613      	movcs	r3, r2
 80078de:	b29b      	uxth	r3, r3
 80078e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078e2:	893b      	ldrh	r3, [r7, #8]
 80078e4:	461a      	mov	r2, r3
 80078e6:	68f9      	ldr	r1, [r7, #12]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fa22 	bl	8007d32 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	88db      	ldrh	r3, [r3, #6]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d104      	bne.n	8007900 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa79 	bl	8007dee <USBD_CtlSendStatus>
 80078fc:	e000      	b.n	8007900 <USBD_GetDescriptor+0x2c8>
    return;
 80078fe:	bf00      	nop
    }
  }
}
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	889b      	ldrh	r3, [r3, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d130      	bne.n	800797c <USBD_SetAddress+0x74>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	88db      	ldrh	r3, [r3, #6]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d12c      	bne.n	800797c <USBD_SetAddress+0x74>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	2b7f      	cmp	r3, #127	; 0x7f
 8007928:	d828      	bhi.n	800797c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	885b      	ldrh	r3, [r3, #2]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793c:	2b03      	cmp	r3, #3
 800793e:	d104      	bne.n	800794a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f98b 	bl	8007c5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007948:	e01d      	b.n	8007986 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	7bfa      	ldrb	r2, [r7, #15]
 800794e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fe21 	bl	800859e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa46 	bl	8007dee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	e009      	b.n	8007986 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	e004      	b.n	8007986 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f96d 	bl	8007c5e <USBD_CtlError>
  }
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	4b41      	ldr	r3, [pc, #260]	; (8007aa8 <USBD_SetConfig+0x118>)
 80079a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079a4:	4b40      	ldr	r3, [pc, #256]	; (8007aa8 <USBD_SetConfig+0x118>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d904      	bls.n	80079b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f955 	bl	8007c5e <USBD_CtlError>
 80079b4:	e075      	b.n	8007aa2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d002      	beq.n	80079c6 <USBD_SetConfig+0x36>
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d023      	beq.n	8007a0c <USBD_SetConfig+0x7c>
 80079c4:	e062      	b.n	8007a8c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80079c6:	4b38      	ldr	r3, [pc, #224]	; (8007aa8 <USBD_SetConfig+0x118>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d01a      	beq.n	8007a04 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80079ce:	4b36      	ldr	r3, [pc, #216]	; (8007aa8 <USBD_SetConfig+0x118>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2203      	movs	r2, #3
 80079dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079e0:	4b31      	ldr	r3, [pc, #196]	; (8007aa8 <USBD_SetConfig+0x118>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff f9e8 	bl	8006dbc <USBD_SetClassConfig>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d104      	bne.n	80079fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f932 	bl	8007c5e <USBD_CtlError>
            return;
 80079fa:	e052      	b.n	8007aa2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9f6 	bl	8007dee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a02:	e04e      	b.n	8007aa2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9f2 	bl	8007dee <USBD_CtlSendStatus>
        break;
 8007a0a:	e04a      	b.n	8007aa2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007a0c:	4b26      	ldr	r3, [pc, #152]	; (8007aa8 <USBD_SetConfig+0x118>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d112      	bne.n	8007a3a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007a1c:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <USBD_SetConfig+0x118>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007a26:	4b20      	ldr	r3, [pc, #128]	; (8007aa8 <USBD_SetConfig+0x118>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff f9e4 	bl	8006dfa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9db 	bl	8007dee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a38:	e033      	b.n	8007aa2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007a3a:	4b1b      	ldr	r3, [pc, #108]	; (8007aa8 <USBD_SetConfig+0x118>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d01d      	beq.n	8007a84 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff f9d2 	bl	8006dfa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <USBD_SetConfig+0x118>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a60:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <USBD_SetConfig+0x118>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff f9a8 	bl	8006dbc <USBD_SetClassConfig>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d104      	bne.n	8007a7c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f8f2 	bl	8007c5e <USBD_CtlError>
            return;
 8007a7a:	e012      	b.n	8007aa2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9b6 	bl	8007dee <USBD_CtlSendStatus>
        break;
 8007a82:	e00e      	b.n	8007aa2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f9b2 	bl	8007dee <USBD_CtlSendStatus>
        break;
 8007a8a:	e00a      	b.n	8007aa2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f8e5 	bl	8007c5e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <USBD_SetConfig+0x118>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff f9ad 	bl	8006dfa <USBD_ClrClassConfig>
        break;
 8007aa0:	bf00      	nop
    }
  }
}
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20000200 	.word	0x20000200

08007aac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d004      	beq.n	8007ac8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f8cc 	bl	8007c5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ac6:	e022      	b.n	8007b0e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	dc02      	bgt.n	8007ad8 <USBD_GetConfig+0x2c>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dc03      	bgt.n	8007ade <USBD_GetConfig+0x32>
 8007ad6:	e015      	b.n	8007b04 <USBD_GetConfig+0x58>
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d00b      	beq.n	8007af4 <USBD_GetConfig+0x48>
 8007adc:	e012      	b.n	8007b04 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	2201      	movs	r2, #1
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f920 	bl	8007d32 <USBD_CtlSendData>
        break;
 8007af2:	e00c      	b.n	8007b0e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	2201      	movs	r2, #1
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f918 	bl	8007d32 <USBD_CtlSendData>
        break;
 8007b02:	e004      	b.n	8007b0e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f8a9 	bl	8007c5e <USBD_CtlError>
        break;
 8007b0c:	bf00      	nop
}
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b26:	3b01      	subs	r3, #1
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d81e      	bhi.n	8007b6a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	88db      	ldrh	r3, [r3, #6]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d004      	beq.n	8007b3e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f891 	bl	8007c5e <USBD_CtlError>
        break;
 8007b3c:	e01a      	b.n	8007b74 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f043 0202 	orr.w	r2, r3, #2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	2202      	movs	r2, #2
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8e5 	bl	8007d32 <USBD_CtlSendData>
      break;
 8007b68:	e004      	b.n	8007b74 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f876 	bl	8007c5e <USBD_CtlError>
      break;
 8007b72:	bf00      	nop
  }
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d106      	bne.n	8007b9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f929 	bl	8007dee <USBD_CtlSendStatus>
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d80b      	bhi.n	8007bd2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d10c      	bne.n	8007bdc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f90f 	bl	8007dee <USBD_CtlSendStatus>
      }
      break;
 8007bd0:	e004      	b.n	8007bdc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f842 	bl	8007c5e <USBD_CtlError>
      break;
 8007bda:	e000      	b.n	8007bde <USBD_ClrFeature+0x3a>
      break;
 8007bdc:	bf00      	nop
  }
}
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781a      	ldrb	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	785a      	ldrb	r2, [r3, #1]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	3302      	adds	r3, #2
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	3303      	adds	r3, #3
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	4413      	add	r3, r2
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	3305      	adds	r3, #5
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	4413      	add	r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	3306      	adds	r3, #6
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	3307      	adds	r3, #7
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	4413      	add	r3, r2
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	80da      	strh	r2, [r3, #6]

}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr

08007c5e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c68:	2180      	movs	r1, #128	; 0x80
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fc2e 	bl	80084cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c70:	2100      	movs	r1, #0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fc2a 	bl	80084cc <USBD_LL_StallEP>
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d032      	beq.n	8007cfc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f834 	bl	8007d04 <USBD_GetLen>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	75fa      	strb	r2, [r7, #23]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	7812      	ldrb	r2, [r2, #0]
 8007cba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	75fa      	strb	r2, [r7, #23]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	2203      	movs	r2, #3
 8007cca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ccc:	e012      	b.n	8007cf4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	60fa      	str	r2, [r7, #12]
 8007cd4:	7dfa      	ldrb	r2, [r7, #23]
 8007cd6:	1c51      	adds	r1, r2, #1
 8007cd8:	75f9      	strb	r1, [r7, #23]
 8007cda:	4611      	mov	r1, r2
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	440a      	add	r2, r1
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	75fa      	strb	r2, [r7, #23]
 8007cea:	461a      	mov	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4413      	add	r3, r2
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e8      	bne.n	8007cce <USBD_GetString+0x4e>
    }
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007d10:	e005      	b.n	8007d1e <USBD_GetLen+0x1a>
  {
    len++;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	3301      	adds	r3, #1
 8007d16:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f5      	bne.n	8007d12 <USBD_GetLen+0xe>
  }

  return len;
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bc80      	pop	{r7}
 8007d30:	4770      	bx	lr

08007d32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d48:	88fa      	ldrh	r2, [r7, #6]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d54:	88fb      	ldrh	r3, [r7, #6]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	2100      	movs	r1, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fc3e 	bl	80085dc <USBD_LL_Transmit>

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	4613      	mov	r3, r2
 8007d76:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fc2c 	bl	80085dc <USBD_LL_Transmit>

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2203      	movs	r2, #3
 8007da0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007da4:	88fa      	ldrh	r2, [r7, #6]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007dac:	88fa      	ldrh	r2, [r7, #6]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007db4:	88fb      	ldrh	r3, [r7, #6]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fc31 	bl	8008622 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fc1f 	bl	8008622 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2204      	movs	r2, #4
 8007dfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2200      	movs	r2, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fbe9 	bl	80085dc <USBD_LL_Transmit>

  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2205      	movs	r2, #5
 8007e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e24:	2300      	movs	r3, #0
 8007e26:	2200      	movs	r2, #0
 8007e28:	2100      	movs	r1, #0
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fbf9 	bl	8008622 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e40:	2200      	movs	r2, #0
 8007e42:	4912      	ldr	r1, [pc, #72]	; (8007e8c <MX_USB_DEVICE_Init+0x50>)
 8007e44:	4812      	ldr	r0, [pc, #72]	; (8007e90 <MX_USB_DEVICE_Init+0x54>)
 8007e46:	f7fe ff5f 	bl	8006d08 <USBD_Init>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e50:	f7f8 fd74 	bl	800093c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e54:	490f      	ldr	r1, [pc, #60]	; (8007e94 <MX_USB_DEVICE_Init+0x58>)
 8007e56:	480e      	ldr	r0, [pc, #56]	; (8007e90 <MX_USB_DEVICE_Init+0x54>)
 8007e58:	f7fe ff81 	bl	8006d5e <USBD_RegisterClass>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e62:	f7f8 fd6b 	bl	800093c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e66:	490c      	ldr	r1, [pc, #48]	; (8007e98 <MX_USB_DEVICE_Init+0x5c>)
 8007e68:	4809      	ldr	r0, [pc, #36]	; (8007e90 <MX_USB_DEVICE_Init+0x54>)
 8007e6a:	f7fe fee1 	bl	8006c30 <USBD_CDC_RegisterInterface>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e74:	f7f8 fd62 	bl	800093c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e78:	4805      	ldr	r0, [pc, #20]	; (8007e90 <MX_USB_DEVICE_Init+0x54>)
 8007e7a:	f7fe ff89 	bl	8006d90 <USBD_Start>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e84:	f7f8 fd5a 	bl	800093c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e88:	bf00      	nop
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	2000012c 	.word	0x2000012c
 8007e90:	20000204 	.word	0x20000204
 8007e94:	20000018 	.word	0x20000018
 8007e98:	2000011c 	.word	0x2000011c

08007e9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4905      	ldr	r1, [pc, #20]	; (8007eb8 <CDC_Init_FS+0x1c>)
 8007ea4:	4805      	ldr	r0, [pc, #20]	; (8007ebc <CDC_Init_FS+0x20>)
 8007ea6:	f7fe fed9 	bl	8006c5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007eaa:	4905      	ldr	r1, [pc, #20]	; (8007ec0 <CDC_Init_FS+0x24>)
 8007eac:	4803      	ldr	r0, [pc, #12]	; (8007ebc <CDC_Init_FS+0x20>)
 8007eae:	f7fe feee 	bl	8006c8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007eb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000548 	.word	0x20000548
 8007ebc:	20000204 	.word	0x20000204
 8007ec0:	200004c8 	.word	0x200004c8

08007ec4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ec8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bc80      	pop	{r7}
 8007ed0:	4770      	bx	lr
	...

08007ed4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	6039      	str	r1, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	2b23      	cmp	r3, #35	; 0x23
 8007ee8:	d84a      	bhi.n	8007f80 <CDC_Control_FS+0xac>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <CDC_Control_FS+0x1c>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f81 	.word	0x08007f81
 8007ef4:	08007f81 	.word	0x08007f81
 8007ef8:	08007f81 	.word	0x08007f81
 8007efc:	08007f81 	.word	0x08007f81
 8007f00:	08007f81 	.word	0x08007f81
 8007f04:	08007f81 	.word	0x08007f81
 8007f08:	08007f81 	.word	0x08007f81
 8007f0c:	08007f81 	.word	0x08007f81
 8007f10:	08007f81 	.word	0x08007f81
 8007f14:	08007f81 	.word	0x08007f81
 8007f18:	08007f81 	.word	0x08007f81
 8007f1c:	08007f81 	.word	0x08007f81
 8007f20:	08007f81 	.word	0x08007f81
 8007f24:	08007f81 	.word	0x08007f81
 8007f28:	08007f81 	.word	0x08007f81
 8007f2c:	08007f81 	.word	0x08007f81
 8007f30:	08007f81 	.word	0x08007f81
 8007f34:	08007f81 	.word	0x08007f81
 8007f38:	08007f81 	.word	0x08007f81
 8007f3c:	08007f81 	.word	0x08007f81
 8007f40:	08007f81 	.word	0x08007f81
 8007f44:	08007f81 	.word	0x08007f81
 8007f48:	08007f81 	.word	0x08007f81
 8007f4c:	08007f81 	.word	0x08007f81
 8007f50:	08007f81 	.word	0x08007f81
 8007f54:	08007f81 	.word	0x08007f81
 8007f58:	08007f81 	.word	0x08007f81
 8007f5c:	08007f81 	.word	0x08007f81
 8007f60:	08007f81 	.word	0x08007f81
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	08007f81 	.word	0x08007f81
 8007f6c:	08007f81 	.word	0x08007f81
 8007f70:	08007f81 	.word	0x08007f81
 8007f74:	08007f81 	.word	0x08007f81
 8007f78:	08007f81 	.word	0x08007f81
 8007f7c:	08007f81 	.word	0x08007f81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f80:	bf00      	nop
  }

  return (USBD_OK);
 8007f82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop

08007f90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <CDC_Receive_FS+0x24>)
 8007f9e:	f7fe fe76 	bl	8006c8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fa2:	4804      	ldr	r0, [pc, #16]	; (8007fb4 <CDC_Receive_FS+0x24>)
 8007fa4:	f7fe fe86 	bl	8006cb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fa8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000204 	.word	0x20000204

08007fb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	6039      	str	r1, [r7, #0]
 8007fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2212      	movs	r2, #18
 8007fc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20000148 	.word	0x20000148

08007fdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2204      	movs	r2, #4
 8007fec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fee:	4b03      	ldr	r3, [pc, #12]	; (8007ffc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bc80      	pop	{r7}
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	2000015c 	.word	0x2000015c

08008000 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	6039      	str	r1, [r7, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d105      	bne.n	800801e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4907      	ldr	r1, [pc, #28]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
 8008016:	4808      	ldr	r0, [pc, #32]	; (8008038 <USBD_FS_ProductStrDescriptor+0x38>)
 8008018:	f7ff fe32 	bl	8007c80 <USBD_GetString>
 800801c:	e004      	b.n	8008028 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	4904      	ldr	r1, [pc, #16]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
 8008022:	4805      	ldr	r0, [pc, #20]	; (8008038 <USBD_FS_ProductStrDescriptor+0x38>)
 8008024:	f7ff fe2c 	bl	8007c80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008028:	4b02      	ldr	r3, [pc, #8]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	200005c8 	.word	0x200005c8
 8008038:	08008798 	.word	0x08008798

0800803c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	6039      	str	r1, [r7, #0]
 8008046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	4904      	ldr	r1, [pc, #16]	; (800805c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800804c:	4804      	ldr	r0, [pc, #16]	; (8008060 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800804e:	f7ff fe17 	bl	8007c80 <USBD_GetString>
  return USBD_StrDesc;
 8008052:	4b02      	ldr	r3, [pc, #8]	; (800805c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200005c8 	.word	0x200005c8
 8008060:	080087b0 	.word	0x080087b0

08008064 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	221a      	movs	r2, #26
 8008074:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008076:	f000 f843 	bl	8008100 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800807a:	4b02      	ldr	r3, [pc, #8]	; (8008084 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20000160 	.word	0x20000160

08008088 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d105      	bne.n	80080a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	4907      	ldr	r1, [pc, #28]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800809e:	4808      	ldr	r0, [pc, #32]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080a0:	f7ff fdee 	bl	8007c80 <USBD_GetString>
 80080a4:	e004      	b.n	80080b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	4904      	ldr	r1, [pc, #16]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080aa:	4805      	ldr	r0, [pc, #20]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080ac:	f7ff fde8 	bl	8007c80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080b0:	4b02      	ldr	r3, [pc, #8]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	200005c8 	.word	0x200005c8
 80080c0:	080087c4 	.word	0x080087c4

080080c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d105      	bne.n	80080e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4907      	ldr	r1, [pc, #28]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080da:	4808      	ldr	r0, [pc, #32]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080dc:	f7ff fdd0 	bl	8007c80 <USBD_GetString>
 80080e0:	e004      	b.n	80080ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4904      	ldr	r1, [pc, #16]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080e6:	4805      	ldr	r0, [pc, #20]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080e8:	f7ff fdca 	bl	8007c80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080ec:	4b02      	ldr	r3, [pc, #8]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200005c8 	.word	0x200005c8
 80080fc:	080087d0 	.word	0x080087d0

08008100 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008106:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <Get_SerialNum+0x44>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800810c:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <Get_SerialNum+0x48>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008112:	4b0e      	ldr	r3, [pc, #56]	; (800814c <Get_SerialNum+0x4c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4413      	add	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008126:	2208      	movs	r2, #8
 8008128:	4909      	ldr	r1, [pc, #36]	; (8008150 <Get_SerialNum+0x50>)
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 f814 	bl	8008158 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008130:	2204      	movs	r2, #4
 8008132:	4908      	ldr	r1, [pc, #32]	; (8008154 <Get_SerialNum+0x54>)
 8008134:	68b8      	ldr	r0, [r7, #8]
 8008136:	f000 f80f 	bl	8008158 <IntToUnicode>
  }
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	1ffff7e8 	.word	0x1ffff7e8
 8008148:	1ffff7ec 	.word	0x1ffff7ec
 800814c:	1ffff7f0 	.word	0x1ffff7f0
 8008150:	20000162 	.word	0x20000162
 8008154:	20000172 	.word	0x20000172

08008158 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4613      	mov	r3, r2
 8008164:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800816a:	2300      	movs	r3, #0
 800816c:	75fb      	strb	r3, [r7, #23]
 800816e:	e027      	b.n	80081c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	0f1b      	lsrs	r3, r3, #28
 8008174:	2b09      	cmp	r3, #9
 8008176:	d80b      	bhi.n	8008190 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	0f1b      	lsrs	r3, r3, #28
 800817c:	b2da      	uxtb	r2, r3
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	4619      	mov	r1, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	440b      	add	r3, r1
 8008188:	3230      	adds	r2, #48	; 0x30
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	e00a      	b.n	80081a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	0f1b      	lsrs	r3, r3, #28
 8008194:	b2da      	uxtb	r2, r3
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	4619      	mov	r1, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	440b      	add	r3, r1
 80081a0:	3237      	adds	r2, #55	; 0x37
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	3301      	adds	r3, #1
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	4413      	add	r3, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	3301      	adds	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
 80081c0:	7dfa      	ldrb	r2, [r7, #23]
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d3d3      	bcc.n	8008170 <IntToUnicode+0x18>
  }
}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0d      	ldr	r2, [pc, #52]	; (8008218 <HAL_PCD_MspInit+0x44>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d113      	bne.n	800820e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80081e6:	4b0d      	ldr	r3, [pc, #52]	; (800821c <HAL_PCD_MspInit+0x48>)
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	4a0c      	ldr	r2, [pc, #48]	; (800821c <HAL_PCD_MspInit+0x48>)
 80081ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081f0:	61d3      	str	r3, [r2, #28]
 80081f2:	4b0a      	ldr	r3, [pc, #40]	; (800821c <HAL_PCD_MspInit+0x48>)
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80081fe:	2200      	movs	r2, #0
 8008200:	2100      	movs	r1, #0
 8008202:	2014      	movs	r0, #20
 8008204:	f7f8 fdd7 	bl	8000db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008208:	2014      	movs	r0, #20
 800820a:	f7f8 fdf0 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40005c00 	.word	0x40005c00
 800821c:	40021000 	.word	0x40021000

08008220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8008234:	4619      	mov	r1, r3
 8008236:	4610      	mov	r0, r2
 8008238:	f7fe fdf2 	bl	8006e20 <USBD_LL_SetupStage>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	440b      	add	r3, r1
 8008264:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	4619      	mov	r1, r3
 800826e:	f7fe fe24 	bl	8006eba <USBD_LL_DataOutStage>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	440b      	add	r3, r1
 800829a:	3324      	adds	r3, #36	; 0x24
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	4619      	mov	r1, r3
 80082a2:	f7fe fe7b 	bl	8006f9c <USBD_LL_DataInStage>
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fe ff8b 	bl	80071d8 <USBD_LL_SOF>
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	799b      	ldrb	r3, [r3, #6]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d001      	beq.n	80082e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082de:	f7f8 fb2d 	bl	800093c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082e8:	7bfa      	ldrb	r2, [r7, #15]
 80082ea:	4611      	mov	r1, r2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe ff3b 	bl	8007168 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fef4 	bl	80070e6 <USBD_LL_Reset>
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe ff35 	bl	8007186 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7a9b      	ldrb	r3, [r3, #10]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008324:	4b04      	ldr	r3, [pc, #16]	; (8008338 <HAL_PCD_SuspendCallback+0x30>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4a03      	ldr	r2, [pc, #12]	; (8008338 <HAL_PCD_SuspendCallback+0x30>)
 800832a:	f043 0306 	orr.w	r3, r3, #6
 800832e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed00 	.word	0xe000ed00

0800833c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe ff2f 	bl	80071ae <USBD_LL_Resume>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008360:	4a28      	ldr	r2, [pc, #160]	; (8008404 <USBD_LL_Init+0xac>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a26      	ldr	r2, [pc, #152]	; (8008404 <USBD_LL_Init+0xac>)
 800836c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008370:	4b24      	ldr	r3, [pc, #144]	; (8008404 <USBD_LL_Init+0xac>)
 8008372:	4a25      	ldr	r2, [pc, #148]	; (8008408 <USBD_LL_Init+0xb0>)
 8008374:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008376:	4b23      	ldr	r3, [pc, #140]	; (8008404 <USBD_LL_Init+0xac>)
 8008378:	2208      	movs	r2, #8
 800837a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800837c:	4b21      	ldr	r3, [pc, #132]	; (8008404 <USBD_LL_Init+0xac>)
 800837e:	2202      	movs	r2, #2
 8008380:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008382:	4b20      	ldr	r3, [pc, #128]	; (8008404 <USBD_LL_Init+0xac>)
 8008384:	2200      	movs	r2, #0
 8008386:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008388:	4b1e      	ldr	r3, [pc, #120]	; (8008404 <USBD_LL_Init+0xac>)
 800838a:	2200      	movs	r2, #0
 800838c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800838e:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <USBD_LL_Init+0xac>)
 8008390:	2200      	movs	r2, #0
 8008392:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008394:	481b      	ldr	r0, [pc, #108]	; (8008404 <USBD_LL_Init+0xac>)
 8008396:	f7f8 fee1 	bl	800115c <HAL_PCD_Init>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083a0:	f7f8 facc 	bl	800093c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083aa:	2318      	movs	r3, #24
 80083ac:	2200      	movs	r2, #0
 80083ae:	2100      	movs	r1, #0
 80083b0:	f7fa fbf3 	bl	8002b9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ba:	2358      	movs	r3, #88	; 0x58
 80083bc:	2200      	movs	r2, #0
 80083be:	2180      	movs	r1, #128	; 0x80
 80083c0:	f7fa fbeb 	bl	8002b9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ca:	23c0      	movs	r3, #192	; 0xc0
 80083cc:	2200      	movs	r2, #0
 80083ce:	2181      	movs	r1, #129	; 0x81
 80083d0:	f7fa fbe3 	bl	8002b9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80083de:	2200      	movs	r2, #0
 80083e0:	2101      	movs	r1, #1
 80083e2:	f7fa fbda 	bl	8002b9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083f0:	2200      	movs	r2, #0
 80083f2:	2182      	movs	r1, #130	; 0x82
 80083f4:	f7fa fbd1 	bl	8002b9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	200007c8 	.word	0x200007c8
 8008408:	40005c00 	.word	0x40005c00

0800840c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008422:	4618      	mov	r0, r3
 8008424:	f7f8 ff90 	bl	8001348 <HAL_PCD_Start>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f94e 	bl	80086d0 <USBD_Get_USB_Status>
 8008434:	4603      	mov	r3, r0
 8008436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008438:	7bbb      	ldrb	r3, [r7, #14]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	461a      	mov	r2, r3
 8008450:	4603      	mov	r3, r0
 8008452:	70fb      	strb	r3, [r7, #3]
 8008454:	460b      	mov	r3, r1
 8008456:	70bb      	strb	r3, [r7, #2]
 8008458:	4613      	mov	r3, r2
 800845a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800846a:	78bb      	ldrb	r3, [r7, #2]
 800846c:	883a      	ldrh	r2, [r7, #0]
 800846e:	78f9      	ldrb	r1, [r7, #3]
 8008470:	f7f9 f8e4 	bl	800163c <HAL_PCD_EP_Open>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f928 	bl	80086d0 <USBD_Get_USB_Status>
 8008480:	4603      	mov	r3, r0
 8008482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008484:	7bbb      	ldrb	r3, [r7, #14]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084a8:	78fa      	ldrb	r2, [r7, #3]
 80084aa:	4611      	mov	r1, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7f9 f922 	bl	80016f6 <HAL_PCD_EP_Close>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f909 	bl	80086d0 <USBD_Get_USB_Status>
 80084be:	4603      	mov	r3, r0
 80084c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	4611      	mov	r1, r2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7f9 f9ca 	bl	8001884 <HAL_PCD_EP_SetStall>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f8ea 	bl	80086d0 <USBD_Get_USB_Status>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008500:	7bbb      	ldrb	r3, [r7, #14]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f7f9 fa0b 	bl	8001944 <HAL_PCD_EP_ClrStall>
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f8cb 	bl	80086d0 <USBD_Get_USB_Status>
 800853a:	4603      	mov	r3, r0
 800853c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800855a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800855c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008560:	2b00      	cmp	r3, #0
 8008562:	da0b      	bge.n	800857c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	440b      	add	r3, r1
 8008576:	3312      	adds	r3, #18
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	e00b      	b.n	8008594 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	440b      	add	r3, r1
 800858e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8008592:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr

0800859e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f7f9 f819 	bl	80015f4 <HAL_PCD_SetAddress>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f881 	bl	80086d0 <USBD_Get_USB_Status>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	607a      	str	r2, [r7, #4]
 80085e6:	461a      	mov	r2, r3
 80085e8:	460b      	mov	r3, r1
 80085ea:	72fb      	strb	r3, [r7, #11]
 80085ec:	4613      	mov	r3, r2
 80085ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085fe:	893b      	ldrh	r3, [r7, #8]
 8008600:	7af9      	ldrb	r1, [r7, #11]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	f7f9 f907 	bl	8001816 <HAL_PCD_EP_Transmit>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f85e 	bl	80086d0 <USBD_Get_USB_Status>
 8008614:	4603      	mov	r3, r0
 8008616:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008618:	7dbb      	ldrb	r3, [r7, #22]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b086      	sub	sp, #24
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	461a      	mov	r2, r3
 800862e:	460b      	mov	r3, r1
 8008630:	72fb      	strb	r3, [r7, #11]
 8008632:	4613      	mov	r3, r2
 8008634:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008644:	893b      	ldrh	r3, [r7, #8]
 8008646:	7af9      	ldrb	r1, [r7, #11]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	f7f9 f89c 	bl	8001786 <HAL_PCD_EP_Receive>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f83b 	bl	80086d0 <USBD_Get_USB_Status>
 800865a:	4603      	mov	r3, r0
 800865c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800865e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800867a:	78fa      	ldrb	r2, [r7, #3]
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7f9 f8b2 	bl	80017e8 <HAL_PCD_EP_GetRxCount>
 8008684:	4603      	mov	r3, r0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <USBD_static_malloc+0x14>)
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr
 80086a4:	20000aa0 	.word	0x20000aa0

080086a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]

}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr

080086d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d817      	bhi.n	8008714 <USBD_Get_USB_Status+0x44>
 80086e4:	a201      	add	r2, pc, #4	; (adr r2, 80086ec <USBD_Get_USB_Status+0x1c>)
 80086e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ea:	bf00      	nop
 80086ec:	080086fd 	.word	0x080086fd
 80086f0:	08008703 	.word	0x08008703
 80086f4:	08008709 	.word	0x08008709
 80086f8:	0800870f 	.word	0x0800870f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008700:	e00b      	b.n	800871a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008702:	2302      	movs	r3, #2
 8008704:	73fb      	strb	r3, [r7, #15]
    break;
 8008706:	e008      	b.n	800871a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008708:	2301      	movs	r3, #1
 800870a:	73fb      	strb	r3, [r7, #15]
    break;
 800870c:	e005      	b.n	800871a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800870e:	2302      	movs	r3, #2
 8008710:	73fb      	strb	r3, [r7, #15]
    break;
 8008712:	e002      	b.n	800871a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008714:	2302      	movs	r3, #2
 8008716:	73fb      	strb	r3, [r7, #15]
    break;
 8008718:	bf00      	nop
  }
  return usb_status;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop

08008728 <__libc_init_array>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	2600      	movs	r6, #0
 800872c:	4d0c      	ldr	r5, [pc, #48]	; (8008760 <__libc_init_array+0x38>)
 800872e:	4c0d      	ldr	r4, [pc, #52]	; (8008764 <__libc_init_array+0x3c>)
 8008730:	1b64      	subs	r4, r4, r5
 8008732:	10a4      	asrs	r4, r4, #2
 8008734:	42a6      	cmp	r6, r4
 8008736:	d109      	bne.n	800874c <__libc_init_array+0x24>
 8008738:	f000 f822 	bl	8008780 <_init>
 800873c:	2600      	movs	r6, #0
 800873e:	4d0a      	ldr	r5, [pc, #40]	; (8008768 <__libc_init_array+0x40>)
 8008740:	4c0a      	ldr	r4, [pc, #40]	; (800876c <__libc_init_array+0x44>)
 8008742:	1b64      	subs	r4, r4, r5
 8008744:	10a4      	asrs	r4, r4, #2
 8008746:	42a6      	cmp	r6, r4
 8008748:	d105      	bne.n	8008756 <__libc_init_array+0x2e>
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008750:	4798      	blx	r3
 8008752:	3601      	adds	r6, #1
 8008754:	e7ee      	b.n	8008734 <__libc_init_array+0xc>
 8008756:	f855 3b04 	ldr.w	r3, [r5], #4
 800875a:	4798      	blx	r3
 800875c:	3601      	adds	r6, #1
 800875e:	e7f2      	b.n	8008746 <__libc_init_array+0x1e>
 8008760:	08008804 	.word	0x08008804
 8008764:	08008804 	.word	0x08008804
 8008768:	08008804 	.word	0x08008804
 800876c:	08008808 	.word	0x08008808

08008770 <memset>:
 8008770:	4603      	mov	r3, r0
 8008772:	4402      	add	r2, r0
 8008774:	4293      	cmp	r3, r2
 8008776:	d100      	bne.n	800877a <memset+0xa>
 8008778:	4770      	bx	lr
 800877a:	f803 1b01 	strb.w	r1, [r3], #1
 800877e:	e7f9      	b.n	8008774 <memset+0x4>

08008780 <_init>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	bf00      	nop
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr

0800878c <_fini>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr
